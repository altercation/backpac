#!/bin/bash

HR="--------------------------------------------------------------------------------"
HR2="================================================================================"

Fill_Title ()
{
    local _title="${1}"
    local _length=$(( ${2:-80} - ${#_title} - 1 ))
    printf -v line '%*s' "$_length"
    echo -e "${_title%*} ${line// /=}"
}

Debug () { echo -e ">>> DEBUG: EXECUTING ${FUNCNAME[1]} AT LINE ${BASH_LINENO[0]}${*:+ >>> }${*:-}"; }

Hash_Of () { echo -n "${1}" | md5sum | awk '{print $1}'; }

#
Is_True () { case $(Lower_Case ${1:-}) in true|yes|1|y) return 0 ;; *) return 1 ;; esac; }
Is_False () { case $(Lower_Case ${1:-}) in false|no|0|n) return 0 ;; *) return 1 ;; esac; }

# takes variable name to check
Is_Array () { [[ -n ${1:-} ]] && echo "$(declare)" | egrep -q "^${1}=\(" || return 1; }
Unset_Array () { eval "local _i; for _i in \"\${!${1}[@]}\"; do unset ${1}[\$_i]; done"; }
Add_To_Array () { local _array="${1}" _val="${2}"; declare -ga "$_array"; eval "$_array[\${#$_array[*]}]=\"\${_val}\""; }
Remove_From_Array ()
{
    local _a="${1}" # array name
    local _v="${2}" # remove value
    eval "local _i; for _i in \"\${!${_a}[@]}\"; do [[ \"\${${_a}[\$_i]}\" != \"\${_v}\" ]] || ${_a}[\$_i]=; done;"
}
Swap_In_Array ()
{
    eval "local _i; for _i in \"\${!${1}[@]}\"; do [[ \"\${${1}[\$_i]}\" != \"\${2}\" ]] || ${1}[\$_i]="\${3}"; done;"
}

# Handles string lists or arrays
# Lists can be space or newline delimited, converted to newline delimited
# 1: name of array or variable (not contents)
# 2: value to add
Add_To ()
{
    if Is_Array "${1}"
    then
        local _array_name="${1}"
        local _val="${2}"
        declare -ga "$_array_name"
        eval "$_array_name[\${#$_array_name[*]}]=\"\${_val}\""
    else
        local _var_name="${1}"
        local _val="${2}"
        eval "declare -g ${_var_name}"
        eval "local _combined=\"\${${_var_name}:-} \${_val}\""
        eval "${_var_name}=\"$(Normalize_To_List "${_combined}")\""
    fi
}

# Handles string lists or arrays
# Lists can be space or newline delimited, converted to newline delimited
# 1: name of array or variable (not contents)
# 2: value to add
Remove_From ()
{
    if Is_Array ${1}
    then
        local _a="${1}" # array name
        local _v="${2}" # remove value
        eval "local _i; for _i in \"\${!${_a}[@]}\"; do [[ \"\${${_a}[\$_i]}\" != \"\${_v}\" ]] || ${_a}[\$_i]=; done;"
    else
        local _result="$(echo ${!1} | Normalize_To_List | egrep -v "^${2}$")"
        eval "${1}=\"\${_result}\""
    fi
}

# Handles string lists or arrays
# Lists can be space or newline delimited, converted to newline delimited
# 1: name of array or variable (not contents)
# 2: value to replace
# 3: replacement value
Swap_In ()
{
    if Is_Array ${1}
    then
        eval "local _i; for _i in \"\${!${1}[@]}\"; do [[ \"\${${1}[\$_i]}\" != \"\${2}\" ]] || ${1}[\$_i]="\${3}"; done;"
    else
        local _result="$(echo ${!1} | Normalize_To_List | sed "s/^${2}$/${3}/")"
        eval "${1}=\"\${_result}\""
    fi
}

Upper_Case () { echo -n "$*" | tr '[:lower:]' '[:upper:]'; }
Lower_Case () { echo -n "$*" | tr '[:upper:]' '[:lower:]'; }

Fail_Critically () { echo -e "\nCRITICAL FAILURE. Reported by ${FUNCNAME[1]}:\n$(echo ${1})"; exit 1; }
Fail_Noncritically () { echo -e "\nNONCRITICAL FAILURE. Reported by ${FUNCNAME[1]}:\n$(echo ${1})"; }

regen () { echo "TODO: add mkinitcpio, grub regen here"; }
Install_Package () { sudo pacman -Sq --noconfirm "${1}"; }
Uninstall_Package () { sudo pacman -Rsu --noconfirm "${1}"; }

# Read a file's contents, stripping comment lines
Read_File_Drop_Comments () { [[ -e ${1} ]] && egrep "^\s*[^#]" "${1}" || Unit_Report "FILE NOT PRESENT: ${1}"; } #return 0

# Read file lines to array
# Takes a path and an array variable name
Read_File_Lines_To_Array ()
{
    local _filepath="${1}"
    local _arrayname="${2}"
    [[ ! -e "${_filepath}" ]] && return 1
    declare -ag ${_arrayname}
    local _line
    local _line_num=0
    while read -r _line
    do
        if echo "$_line" | egrep -q "^\s*[^#]"
        then
            declare -ag ${_arrayname}[$_line_num]="$_line"
            let "_line_num+=1"
        fi
    done < "${_filepath}"
}

Array_To_List ()
{
    local _arrayname="${1}"
    local _line
    local _line_num=0
    while true
    do
        eval [[ \$_line_num == \${#$_arrayname[@]} ]] && break
        eval _line="\${$_arrayname[$_line_num]}"
        [[ -z ${_line} ]] || echo "${_line}"
        let "_line_num+=1"
    done
}

# TODO: get rid of duplication with to list above
Array_To_Report ()
{
    #Array_To_List $*
    #return
    local _arrayname="${1}"
    local _line
    local _line_num=0
    while true
    do
        eval [[ \$_line_num == \${#$_arrayname[@]} ]] && break
        eval _line="\${$_arrayname[$_line_num]:-}"
        [[ -z ${_line} ]] || Unit_Report "${_line}"
        let "_line_num+=1"
    done
}

# \d011 is vertical tab, not explicitly disallowed by posix but very, very unlikely
Swap_Out_Escaped_Spaces () { [[ -n ${*:-} ]] && ( echo -n "${*}" | sed 's/\\ /\d011/g'; ) || return 0; }
Swap_In_Escaped_Spaces () { [[ -n ${*:-} ]] && ( echo -n "${*}" | sed 's/\d011/\\ /g'; ) || return 0; }

#UI_Passive_Alert () { eval "local _alert=\"${1:-}\""; [[ -n ${_alert:-} ]] && echo -e "${_alert}"; }
UI_Passive_Alert () { eval "local _alert=\"${1:-}\""; [[ -n ${_alert:-} ]] && echo -e "${_alert}" | fmt -sw 80; }
UI_Incremental_Alert () { [[ -n ${1:-} ]] && echo -ne "${1}" || echo; }
UI_Passive_Warning () { echo -e "\nWARNING"; eval "echo -e \"${*}\""; }
UI_Query_Warning () { echo -e "\nWARNING"; eval "echo -e \"${*}\""; Query "Proceed?"; }

# takes two arguments
# 1: Prompt string to which is added (y/n)
# 2: name of temporary global to set to true if response is for all
Query ()
{
    eval "local _alert=\"${1}\""
    echo -n "$(echo -en "${_alert}" | fmt -sw 80)"
    while true
    do
        [[ -n ${2:-} ]] \
            && local _prompt=" (y/n==this) (Y/N==all) " \
            || local _prompt=" (y/n) "
        read -p "${_prompt}" response
        case $response in
            y*) return 0 ;;
            Y*) [[ -n ${2:-} ]] && eval ${2}=true; return 0 ;;
            n*) return 1 ;;
            N*) [[ -n ${2:-} ]] && eval ${2}=true; return 1 ;;
        esac
    done
}

#Progress_Report () { [[ -z ${!1:-} ]] || Unit_Report "${2}:\n${HR}\n$(echo ${!1})"; }
Progress_Report ()
{
    local _var_name="${1}"
    local _report_val="${2:-}"
    [[ -n ${_report_val} ]] && local _sep=":" || local _sep=""
    if Is_Array "${_var_name}"
    then
        eval "local _eval_string=\"\${${_var_name}[@]:-}"\"
        if [[ -z $(echo -n ${_eval_string}) ]]
        then
            :
        else
            Unit_Report "\n${_report_val:-}${_sep}\n${HR}"
            Array_To_Report ${_var_name}
        fi
    else
        #eval "[[ -n \${$_var_name:-} ]] && Unit_Report \"\\\n\${_report_val}:\\\n\${HR}\\\n\$(echo \${$_var_name})\"" || true
        eval "[[ -z \${$_var_name:-} ]] || Unit_Report \"\\\n\${_report_val}${_sep}\\\n\${HR}\\\n\$(echo \${$_var_name})\""
    fi
}

Unit_Report ()
{
    # find parent UNIT_ function
    _message="$(echo $*)"
    local _category
    for _category in "${FUNCNAME[@]}"
    do
        [[ $(expr "${_category}" : "UNIT_") > 0 ]] && break
    done

    # add to list of categories if this is a new REPORT_ value
    if [[ -z ${REPORT_[${_category#UNIT_}]:-} ]]
    then
        REPORT_SEQUENCE_[$((${#REPORT_SEQUENCE_[@]}+1))]=${_category#UNIT_}
    fi

    # add report string to report category string
    #REPORT_[${_category#UNIT_}]+="$(echo ${_message})\n";
    REPORT_[${_category#UNIT_}]+="${_message}\n";
}

# Install_Package_From_AUR <package_name>
# Syncs dependencies from official repositories with makepkg
Install_Package_From_AUR ()
{
    package_name="${1}"
    build_path="${TMPDIR}/build"
    revert_path="${PWD}"
    source_path="https://aur.archlinux.org/packages/${package_name}/${package_name}.tar.gz"

    pacman -Qs ^${package_name}$ &>/dev/null && return 0 # already installed

    _Prepare ()
    {
        rm -rf "${build_path}" || true
        mkdir -p "${build_path}"
    }

    _Make_And_Install ()
    {
        cd "${build_path}"
        wget "${source_path}"
        tar -xzvf "${package_name}.tar.gz"
        cd "${package_name}"
        makepkg -si --noconfirm
    }

    _Cleanup ()
    {
        cd ${revert_path}
        rm -rf ${build_path} || true
        unset source_path
        unset revert_path
        unset build_path
        unset package_name
    }

    Execute_With_Failsafe_Cleanup _Prepare _Make_And_Install _Cleanup
}

# Execute_With_Failsafe_Cleanup "risky" "commands" "mandatory cleanup"
# when executing a risky command with a mandatory cleanup action, this sets up 
# the trap, runs the risky commands and executes cleanup, finally breaking down 
# the trap and restoring the previous trap state.
Execute_With_Failsafe_Cleanup ()
{
    local _previous_traps=$(trap)
    eval local _rollback_command=\"\${${#@}}\"
    eval trap \'${_rollback_command} && return 1\' INT TERM EXIT

    local _command=
    for _command in $(seq ${#@})
    do
        eval "${!_command}"
    done

    #trap - INT TERM EXIT
    eval "${_previous_traps}"
}

# Execute_With_Failsafe_Rollback "risky" "commands "conditional rollback"
# when executing a risky command with a rollback action only required upon 
# critical failure, this sets up the trap and runs the risky commands, finally 
# breaking down the trap and restoring the previous trap state. The rollback 
# command is only executed upon critical failure.
Execute_With_Failsafe_Rollback ()
{
    local _previous_traps=$(trap)
    eval local _rollback_command=\"\${${#@}}\"
    eval trap \'${_rollback_command} && return 1\' INT TERM EXIT

    local _command=
    local _num_args_less_one=$((${#@}-1))
    for _command in $(seq ${_num_args_less_one})
    do
        eval "${!_command}"
    done

    trap - INT TERM EXIT
    eval "${_previous_traps}"
}

Options_Initialize ()
{
# use original command line options from main
set -- $CMDLINE_OPTIONS

# used throughout this funcion; make sure it's local
local _option_array

# read flags into a new array for reverse option lookup using getopts
local _option_flags="h" # we always want 'h' for 'help'
for _option_array in ${!OPT_*}
do
    eval local _flag=\${${_option_array}[FLAG]}
    local _option_flags+="$_flag"       # retain colon if present
    FLAG_[${_flag%:}]="$_option_array"  # strip colon if present
done

# use getopts to process command line options and set values here
local _option_flag
while getopts "${_option_flags}" _option_flag
do case ${_option_flag} in
    \?) exit 1 ;; # getopts has detected an incorrectly formatted option
    h)  Usage; exit 0 ;;
    *)  local _option=${FLAG_[${_option_flag}]}
        local _item;
        eval ${_option}[ALERT]=\"\${${_option}[ALERT_SET]}\"
        eval ${_option}[SET]="true"
        [[ -n ${OPTARG:-} ]] \
        && eval ${_option}[STATE]=\"\${OPTARG}\" \
        || eval ${_option}[STATE]=\"\${${_option}[STATE_SET]}\"
    ;;
esac done

# set GLOBAL_OPTION from equivalent OPT_GLOBAL_OPTION_
for _option_array in ${!OPT_*}
do
    local _global_option=${_option_array#OPT_}
    eval ${_global_option%_}=\"\${$_option_array[STATE]}\"
done

# check for any conflicts
for _option_array in ${!OPT_*}
do
    eval local _test_option_is_set=\"\${$_option_array[SET]:-}\"
    if [[ -n ${_test_option_is_set} ]]
    then
        eval local _conflict_names=\"\${$_option_array[CONFLICTS]:-}\"
        for _conflict_name in $_conflict_names
        do
            [[ -z ${_conflict_name} ]] && _conflict_value=false \
            || eval local _conflict_value=\"\${$_conflict_name}\"
            if Is_True ${_conflict_value}
            then
                eval local _warning=\"Cannot use -\${OPT_${_conflict_name}_[FLAG]} \
                and -\${$_option_array[FLAG]} command line options simultaneously.\"
                UI_Passive_Warning "$(echo ${_warning})\n"
                exit 0
            fi
        done
    fi
done
}

Options_Summary ()
{
# prepare option summary dialog string
local _option_array
local _string=
for _option_array in ${!OPT_*}
do
    local _p="${1:-()}"
    eval [[ -n \${$_option_array[SET]:-} ]] && _p="  "
    # eval echo \"${_p:0:1}-\${$_option_array[FLAG]%:}${_p:1:1}\\t\${$_option_array[ALERT]:-}\"
    eval _string+=\"${_p:0:1}-\${$_option_array[FLAG]%:}${_p:1:1}\\t\${$_option_array[ALERT]:-}\\\n\"
done
echo -en "${_string}" | sort
}

Option_Is_Set ()
{
    local _option_array="${1}"
    eval local _test_set=\"\${$_option_array[SET]:-}\"
    [[ -n ${_test_set} ]] && return 0 || return 1
}

Unframe_Reframe ()
{
    local _lstring="${1}"
    local _mstring="${2}"
    local _rstring="${3}"
    eval "_mstring=\"\${_mstring#$_lstring}\""
    eval "_mstring=\"\${_mstring%$_rstring}\""
    echo -n "${_lstring}${_mstring}${_rstring}"
}

Options_Prerun ()
{
local _option_array
for _option_array in ${!OPT_*}
do
    if Option_Is_Set $_option_array
    then
        eval local _prerun=\"\${$_option_array[PRERUN]:-}\"
        eval local _prerun_conditionals=\"\${$_option_array[PRERUN_CONDITIONALS]:-}\"
        local _prerun_displayed=false
        if [[ -n ${_prerun_conditionals:-} ]]
        then
            local _conditional=
            for _conditional in ${_prerun_conditionals:-}
            do
                if Option_Is_Set "$(Unframe_Reframe "OPT_" "${_conditional}" "_")"
                then
                    eval "[[ -n \${$_option_array[PRERUN_${_conditional}]:-} ]] && echo \"\${$_option_array[PRERUN_${_conditional}]:-}\""
                    _prerun_displayed=true
                fi
            done
        fi
        Is_True $_prerun_displayed || eval "[[ -n \${$_option_array[PRERUN]:-} ]] && echo \"\${$_option_array[PRERUN]:-}\""
    fi
done
}

Options_Warning ()
{
# identify any warnings and prepare a warning dialog string
local _option_array
for _option_array in ${!OPT_*}
do
    eval local _test_set=\"\${$_option_array[SET]:-}\"
    if [[ -n ${_test_set} ]]
    then
        eval local _warn_condition=\"\${!$_option_array[WARN_CONDITION]:-false}\"
        if Is_True $_warn_condition
        then
            eval echo \"\${$_option_array[WARNING]:-}\"
        else
            eval "[[ -n \${$_option_array[NONWARNING]:-} ]] && echo \"\${$_option_array[NONWARNING]:-}\""
        fi
    fi
done
}

Usage ()
{
    UI_Passive_Alert "\n$(Upper_Case "${SCRIPTNAME:-0} options summary:")\n${HR}"
    #local _option_summary="$(Options_Summary "  ")"
local _option_array
local _string=
for _option_array in ${!OPT_*}
do
    _p="  "
    eval _string+=\"${_p:0:1}-\${$_option_array[FLAG]%:}${_p:1:1}\\t\${$_option_array[USAGE]:-}\\\n\"
done
local _option_summary="$(echo -en "${_string}" | sort)"
    [[ -z ${_option_summary:-} ]] || UI_Passive_Alert "${_option_summary}"
    [[ -n ${USAGE_SYSTEM_CONFIG:-} ]] && UI_Passive_Alert "${USAGE_CONFIG_STATE:-}"
    [[ -n ${USAGE_SUMMARY:-} ]] && UI_Passive_Alert "${USAGE_SUMMARY}"
}

_Set_Op_Precheck ()
{
    if Is_Array ${1:-} && Is_Array ${2:-} && [[ -n ${3:-} ]]
    then
        return 0
    else
        Fail_Critically "${FUNCNAME[1]} requires the names of two existing 
        array variables followed by the name of a new variable which will be 
        used as a result array."
    fi
}

Set_Op_Union ()
{
    local _set_a="${1}"
    local _set_b="${2}"
    # should be using clean data, but we shouldn't trust in that
    _set_a="$(echo ${_set_a} | Normalize_To_List)"
    _set_b="$(echo ${_set_b} | Normalize_To_List)"
    echo $_set_a $_set_b | Normalize_To_List
}
Set_Op_Intersection ()
{
    local _set_a="${1}"
    local _set_b="${2}"
    # should be using clean data, but we shouldn't trust in that
    _set_a="$(echo ${_set_a} | Normalize_To_List)"
    _set_b="$(echo ${_set_b} | Normalize_To_List)"
    echo "$(comm -12 <(echo "${_set_a}") <(echo "${_set_b}"))"
}
Set_Op_Difference ()
{
    local _set_a="${1}"
    local _set_b="${2}"
    # should be using clean data, but we shouldn't trust in that
    _set_a="$(echo ${_set_a} | Normalize_To_List)"
    _set_b="$(echo ${_set_b} | Normalize_To_List)"
    echo "$(comm -23 <(echo "${_set_a}") <(echo "${_set_b}"))"
}

# Given a potentially dirty input value, clean it up and output as 
# a one-item-per-line list (assumes items are separated by spaces)
#Normalize_List ()
#{
#    local _input _line
#    if [[ -n ${1:-} ]]
#    then
#        _input="${1}"
#    else
#        while read _line
#        do
#            _input+="${_line} "
#        done
#    fi
#    echo ${_input} | tr -s " " "\n" | sort -u
#}

# Data_To_Sorted_Array input_var_name output_var_name
# Can take either: two input values (both variable *names*), input/ouput
# or piped input and single output array variable name
# --
# If input data is given as variable name, variable can be array or list
# and list can be newline or space separated items
Normalize_To_Array ()
{
    if [[ -n ${2:-} ]]
    then
        _array_name=${2:-}
        Is_Array ${1:-} && eval _data_content+="\${$1[*]}" || _data_content="${!1}"
        eval ${_array_name}=\(\)
        _IFS="$IFS"; IFS="\n"
        local _item
        for _item in $(echo ${_data_content} | tr -s " " "\n" | sort -u)
        do eval ${_array_name}+=\(\"\${_item} \"\); done
        IFS="$_IFS"
    else
        while read _line
        do _data_content+="${_line} "; done
        [[ -z ${_data_content} ]] && Fail_Critically "No input received."
        _IFS="$IFS"; IFS="\n"
        local _item
        for _item in $(echo ${_data_content} | tr -s " " "\n" | sort -u)
        do echo "${_item}"; done
        IFS="$_IFS"
    fi
}

Normalize_To_List ()
{
    # normalize input (option 1 or piped input) to single line space delimited 
    # and output one item per line
    [[ -n ${1:-} ]] && _input="$(echo ${1})" \
        || while read _line; do _input+="${_line} "; done
    [[ -n ${_input:-} ]] && ( echo ${_input} | tr -s " " "\n" | sort -u ) \
        || return 0
}


Ask_Auto_Action ()
{
# Ask_Auto_Action NAME_OF_SOURCE_ARRAY
# example source array and code block:
#
# Unset_Array ASK_AUTO_SOURCE; ASK_AUTO_SOURCE_=(
# [LIST_VAR_NAME]='name of global variable to use as source list'
# [LIST_VALUE]='in lieu of LIST_VAR_NAME, contents of list as string'
# [QUERY_STRING]='string for query prompt'
# [ACTION_CMD]='echo "command if selected y/Y"'
# [EXECUTED_CMD]='command to execute if ACTION_CMD executed successfully'
# [SKIPPED_CMD]='command to execute if ACTION_CMD was skipped by user'
# [FAILED_CMD]='command to execute if ACTION_CMD failed to execute successfully'
# [EXECUTED_LIST_CMD]='command to execute after completing iterations, e.g.  a report on all items in list'
# [SKIPPED_LIST_CMD]='command to execute after completing iterations, e.g.  a report on all items in list'
# [FAILED_LIST_CMD]='command to execute after completing iterations, e.g.  a report on all items in list'
# [EXECUTED_RTN_NAME]='name of global variable used to return value of this list'
# [SKIPPED_RTN_NAME]='name of global variable used to return value of this list'
# [FAILED_RTN_NAME]='name of global variable used to return value of this list'
# [FORCE_VALUE]='${FORCE}'
# [DEFAULT_CHOICE]='true'
# ); Ask_Auto_Action ASK_AUTO_SET_NAME_

local _list_var_name="${ASK_AUTO_SOURCE_[LIST_VAR_NAME]:-}"
local _default_choice="${ASK_AUTO_SOURCE_[DEFAULT_CHOICE]}"
local _item= _executed_list= _failed_list= _skipped_list=
eval local _force=\"${ASK_AUTO_SOURCE_[FORCE_VALUE]:-false}\"
if [[ -n ${_list_var_name:-} ]]
then
    if Is_Array $_list_var_name
    then local _list="$(Array_To_List $_list_var_name)"
    else local _list="$(echo $(Normalize_To_List "${!_list_var_name}"))"
    fi
else
    eval local _list=\$\(echo \${$_source_set[LIST_VALUE]} \| Normalize_To_List\)
fi
Is_True ${_force} && _choice=${_default_choice} || _choice=
for _item in $_list
do
    _hash=$(Hash_Of "$_item") # only used for overlay, but easier to do it once here
    if ! Is_True ${_force}; then Query "${ASK_AUTO_SOURCE_[QUERY_STRING]}" _force && _choice=true || _choice=false; fi
    if Is_True ${_choice}; then
        _action_command     () { eval ${ASK_AUTO_SOURCE_[ACTION_CMD]:-:};    }
        _executed_command   () { eval ${ASK_AUTO_SOURCE_[EXECUTED_CMD]:-:};  }
        _skipped_command    () { eval ${ASK_AUTO_SOURCE_[SKIPPED_CMD]:-:};   }
        _failed_command     () { eval ${ASK_AUTO_SOURCE_[FAILED_CMD]:-:};    }
        if _action_command
        then _executed_list+="${_item} ";   _executed_command
        else _failed_list+="${_item} ";     _failed_command
        fi
    else
        _skipped_list+="${_item} ";         _skipped_command
    fi
done
local _output
for _output in executed skipped failed
do
    local _skipped_rtn_name="${ASK_AUTO_SOURCE_[SKIPPED_RTN_NAME]:-}"
    local _executed_rtn_name="${ASK_AUTO_SOURCE_[EXECUTED_RTN_NAME]:-}"
    local _failed_rtn_name="${ASK_AUTO_SOURCE_[FAILED_RTN_NAME]:-}"
    _executed_list_command () { eval ${ASK_AUTO_SOURCE_[EXECUTED_LIST_CMD]:-:}; }
    _skipped_list_command () { eval ${ASK_AUTO_SOURCE_[SKIPPED_LIST_CMD]:-:}; }
    _failed_list_command () { eval ${ASK_AUTO_SOURCE_[FAILED_LIST_CMD]:-:}; }
    _output_list_name="_${_output}_list"
    _output_rtn_name="_${_output}_rtn_name"
    if  [[ -n "${!_output_list_name:-}" ]]; then
        [[ -n ${!_output_rtn_name:-} ]] && eval ${!_output_rtn_name}=\"\${_${_output}_list}\"
        eval _${_output}_list_command
    fi
done
}
