#!/bin/bash

# script specific functions
# make use of script defined globals

Noforce_Alert ()
{
    Is_True ${FORCE} || UI_Passive_Alert "${*}"
}

UI_Backup_Alert ()
{
    Is_True ${FORCE} && return 0
    if [[ "${BACKUP_MODE}" == "${DEFAULT_BACKUP_MODE}" ]]
    then
        UI_Passive_Alert "$(echo ${*} "(backups will be made):")"
    else
        UI_Passive_Alert "$(echo ${*}):"
    fi
}

Install_Package_From_AUR_Helper () { sudo ${AUR_HELPER} -Sq --noconfirm "${1}"; }

Remove_Item_From_File ()
{
    local _item_name="${1}"
    local _filepath="${2}"
    # yes, twice. there's probably a better sed pattern to deal with all cases
    sed -i "/^[[:space:]]*#/!s/\<${_item_name}\>[^[:punct:]]//" "${_filepath}"
    sed -i "/^[[:space:]]*#/!s/\<${_item_name}\>$//" "${_filepath}"
}

Files_Differ ()
{
    local _filepath_1="${1}"
    local _filepath_2="${2}"
    $(diff -q "${_filepath_1}" "${_filepath_2}" &>/dev/null) && return 1 || return 0
}

# sanitized version
Files_Differ_Sanitized ()
{
    local _filepath_1="${1}" # source, non sanitized
    local _filepath_2="${2}" # assumed possibly sanitized
    local _filepath_1_sanitized="${TMPDIR}/${1#/}" # sanitize 1
    install -D "${_filepath_1}" "${_filepath_1_sanitized}"
    Sanitize "${_filepath_1_sanitized}"
    $(diff -q "${_filepath_1_sanitized}" "${_filepath_2}" &>/dev/null) && return 1 || return 0
    rm "${_filepath_1_sanitized}"
}

File_Install_To_Config () {
    local _path_hash="${1}";
    install -CD --backup=${BACKUP_MODE} -S${BACKUP_SUFFIX} "${FILE_[${_path_hash},PATH,SYST]}" "${FILE_[${_path_hash},PATH,CONF]}"
}

Update_Attribs_In_Config () {
    local _path_hash="${1}";
    FILE_[${_path_hash},ATTR,CONF,PREV]=${FILE_[${_path_hash},ATTR,CONF]};
    FILE_[${_path_hash},ATTR,CONF]=${FILE_[${_path_hash},ATTR,SYST]}
}

Update_Attribs_In_System () {
    local _path_hash="${1}";
    local _target_path="${FILE_[${_path_hash},PATH,SYST]}"
    local _attribs=(${FILE_[${_path_hash},ATTR,CONF]})
    local _mode=${_attribs[0]}
    local _owner=${_attribs[1]}
    local _group=${_attribs[2]}
    sudo chmod ${_mode} ${_target_path}
    sudo chown ${_owner}:${_group} ${_target_path}
}

File_Install_To_System () {
    local _path_hash="${1}";
    local _source_path="${FILE_[${_path_hash},PATH,CONF]}"
    local _target_path="${FILE_[${_path_hash},PATH,SYST]}"
    local _attribs=(${FILE_[${_path_hash},ATTR,CONF]})
    local _mode=${_attribs[0]:+-m}${_attribs[0]:-}
    local _owner=${_attribs[1]:+-o}${_attribs[1]:-}
    local _group=${_attribs[2]:+-g}${_attribs[2]:-}
    if [[ "${USER}" == "${_attribs[1]:-}" ]]
    then
        # user running the script owns the target file
        install -CD --backup=${BACKUP_MODE} -S${BACKUP_SUFFIX} ${_mode} ${_owner} ${_group} "${_source_path}" "${_target_path}"
    else
        # user running the script does not own the file
        sudo install -CD --backup=${BACKUP_MODE} -S${BACKUP_SUFFIX} ${_mode} ${_owner} ${_group} "${_source_path}" "${_target_path}"
    fi
}

Update_Groups_List_If_Changed ()
{
if [[ -n ${GROUPS_INST_CONF:-}${GROUPS_REMO_CONF:-} ]]
then

    # copy current config packages file if present
    [[ -e "${GROUPS_FILEPATH}" ]] \
        && cp "${GROUPS_FILEPATH}" "${TMPDIR}/${GROUPS_FILENAME}" &>/dev/null

    local _tg="${TMPDIR}/${GROUPS_FILENAME}"
    local _dt="$(date +%F)"

    # add newly added packages to list
    if [[ -n ${GROUPS_INST_CONF:-} ]]
    then
        echo -e "\n# GROUPS added by ${SCRIPTNAME} on ${_dt}" >> "${_tg}"
        echo "# ${HR%--}" >>"$_tg"
        echo ${GROUPS_INST_CONF} | fmt -w 80 >>"$_tg"
    fi

    # include a summary of removed packages
    if [[ -n ${GROUPS_REMO_CONF:-} ]]
    then
        local _group_name
        for _group_name in ${GROUPS_REMO_CONF}
        do
            Remove_Item_From_File "${_group_name}" "${_tg}"
        done
        echo -e "\n# GROUPS REMOVED by ${SCRIPTNAME} on ${_dt}" >> "${_tg}"
        echo "# ${HR%--}" >> "${_tg}"
        echo "# $(echo ${GROUPS_REMO_CONF})" >> "${_tg}"
    fi

    # atomic write
    install -CD \
        --backup=${BACKUP_MODE} \
        -S${BACKUP_SUFFIX} \
        "${_tg}" "${GROUPS_FILEPATH}" &>/dev/null \
        && echo "SUCCESSFULLY UPDATED GROUPS LIST" \
        || echo "FAILED TO UPDATE GROUPS LIST!"
#       && MODE_FINAL="SUCCESSFULLY UPDATED GROUPS LIST" \
#       || MODE_FINAL="FAILED TO UPDATE GROUPS LIST!"
#
else
    #MODE_FINAL= #"NO CHANGES MADE; GROUPS LIST NOT UPDATED"
    :
fi
}

Update_Packages_List_If_Changed ()
{
if [[ -n ${PACKAGES_INST_CONF:-}${PACKAGES_REMO_CONF:-}${AUR_INST_CONF:-}${AUR_REMO_CONF:-} ]]
then

    # copy current config packages file if present
    [[ -e "${PACKAGES_FILEPATH}" ]] && cp "${PACKAGES_FILEPATH}" "${TMPDIR}/${PACKAGES_FILENAME}"

    # add newly added packages to list
    if [[ -n ${PACKAGES_INST_CONF:-} ]]
    then
        echo -e "\n# PACKAGES added by ${SCRIPTNAME} on $(date +%F)" >> "${TMPDIR}/${PACKAGES_FILENAME}"
        echo "# ${HR%--}" >> "${TMPDIR}/${PACKAGES_FILENAME}"
        echo ${PACKAGES_INST_CONF} | fmt -w 80 >> "${TMPDIR}/${PACKAGES_FILENAME}"
    fi
    if [[ -n ${AUR_INST_CONF:-} ]]
    then
        echo -e "\n# AUR PACKAGES added by ${SCRIPTNAME} on $(date +%F)" >> "${TMPDIR}/${PACKAGES_FILENAME}"
        echo "# ${HR%--}" >> "${TMPDIR}/${PACKAGES_FILENAME}"
        echo ${AUR_INST_CONF} | fmt -w 80 >> "${TMPDIR}/${PACKAGES_FILENAME}"
    fi

    # include a summary of removed packages
    if [[ -n ${PACKAGES_REMO_CONF:-} ]]
    then
        local _package_name
        for _package_name in ${PACKAGES_REMO_CONF}
        do
            Remove_Item_From_File "${_package_name}" "${TMPDIR}/${PACKAGES_FILENAME}"
        done
        echo -e "\n# PACKAGES REMOVED by ${SCRIPTNAME} on $(date +%F)" >> "${TMPDIR}/${PACKAGES_FILENAME}"
        echo "# ${HR%--}" >> "${TMPDIR}/${PACKAGES_FILENAME}"
        echo "# $(echo ${PACKAGES_REMO_CONF})" >> "${TMPDIR}/${PACKAGES_FILENAME}"
    fi
    if [[ -n ${AUR_REMO_CONF:-} ]]
    then
        local _package_name
        for _package_name in ${AUR_REMO_CONF}
        do
            Remove_Item_From_File "${_package_name}" "${TMPDIR}/${PACKAGES_FILENAME}"
        done
        echo -e "\n# AUR PACKAGES REMOVED by ${SCRIPTNAME} on $(date +%F)" >> "${TMPDIR}/${PACKAGES_FILENAME}"
        echo "# ${HR%--}" >> "${TMPDIR}/${PACKAGES_FILENAME}"
        echo "# $(echo ${AUR_REMO_CONF})" >> "${TMPDIR}/${PACKAGES_FILENAME}"
    fi

    # atomic write
    install -CD --backup=${BACKUP_MODE} -S${BACKUP_SUFFIX} "${TMPDIR}/${PACKAGES_FILENAME}" "${PACKAGES_FILEPATH}" \
    && echo "SUCCESSFULLY UPDATED PACKAGES LIST" \
    || echo "FAILED TO UPDATE PACKAGES LIST!"
#   && MODE_FINAL="SUCCESSFULLY UPDATED PACKAGES LIST" \
#   || MODE_FINAL="FAILED TO UPDATE PACKAGES LIST!"

else
    #MODE_FINAL= #"NO CHANGES MADE; PACKAGES LIST NOT UPDATED"
    :
fi
}
