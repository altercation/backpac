#!/bin/bash

TestFunc ()
{
    :;
}

# ==============================================================================
# SCRIPT EXECUTION SETTINGS
# ==============================================================================

SCRIPTNAME="$(basename $0)"
DEBUG=${DEBUG:-}
set -o nounset # -u : disallow unset variable use
set -o errexit # -e : exit on any trivial error
[[ -z $DEBUG ]] || set -o verbose # -v : talkative bash DEBUG

# ==============================================================================
# REQUIRES
# ==============================================================================
# requires:
if [[ ! ${BASH_VERSION:0:1} -ge 4 ]]
then
    echo "${SCRIPTNAME} requires bash v.4 or greater"
    exit
fi
for test in wget
do
    if ! which $test &>/dev/null
    then
        echo "${SCRIPTNAME} requires $test"
        exit
    fi
done
# packer (can install automatically)

# ==============================================================================
# SCRIPT DEFAULTS
# ==============================================================================

#CMDLINE_OPTIONS="${@}" # global so we can use in functions easily
CMDLINE_OPTIONS="$(echo "${@}" | sed 's/--\([[:alpha:]]\)\w*/-\1/g')"
# global so we can use in functions easily
BACKUP_SUFFIX=".${SCRIPTNAME}-old" # cf man install
DEFAULT_BACKUP_MODE=simple # cf man install
GROUPS_FILENAME="groups"
PACKAGES_FILENAME="packages"
FILES_FILENAME="files"
FILES_DIRNAME="${FILES_FILENAME}.d"
POST_FILENAME="post"

# ==============================================================================
# LIBS LOCATION
# ==============================================================================
LIBS_DIRPATH="/usr/share/${SCRIPTNAME}/lib"
[[ -d "${LIBS_DIRPATH}" ]] || LIBS_DIRPATH="$(dirname $0)/lib"
[[ -d "${LIBS_DIRPATH}" ]] || (echo "Failed to find script libs!" && exit 1)

# ==============================================================================
# DYNAMIC ASSOCIATIVE ARRAYS
# ==============================================================================
# This allows associative arrays to be used like normal bash variables without 
# explicitly declaring them if the are suffixed by an underscore:
# I_AM_AN_ASSOCIATIVE_ARRAY_[INDEED]
# Note: evaluated variable names ( eval I_MAY_${BE_AN_ASSOC}_[ARRAY] ) will not 
# be detected by this unless referenced somewhere else in its full form.
# TODO: only the first assoc array on a line will be declared. Currently the 
# variable name can only be prefixed by non-word characters
# NOTE: "line: xxx: NAME: unbound variable errors are likely because an 
# associative array isn't being detected (usually forgot to use a trailing 
# underscore).
# nb: the sed is a bit ugly but it's compensating for sed's natural greediness
# TODO: clean this up, use word boundaries

for filename in $0 $LIBS_DIRPATH/*; do
for assoc_array in $(egrep '^[^#]*_(\[.*\])?[+=]' $filename \
    | sed 's/\W*\(\W*\)\(\w\+_\)[\[\=\].*/\1-----\2/' \
    | sed 's/.*-----\(.*\)/\1/' | sort -u)
    do
        eval "declare -A $assoc_array";
    done;
done; unset filename

# ==============================================================================
# LIBS
# ==============================================================================

for filename in $LIBS_DIRPATH/* ; do source $filename; done; unset filename

# ==============================================================================
# TEST FUNCTION
# ==============================================================================

TestFunc

# ==============================================================================
# USER DEFAULTS
# ==============================================================================
# Don't change these here. Set in your shell's environment variables.

# Config directory. Override this in your environment with ${SCRIPTNAME}_DIR
CONFIG_DIRPATH_ENVVARNAME="$(Upper_Case $SCRIPTNAME)_CONFIG"
FALLBACK="${XDG_CONFIG_HOME}/${SCRIPTNAME}/${HOSTNAME}"
eval CONFIG_DIRPATH_DEFAULT="\${!$CONFIG_DIRPATH_ENVVARNAME:-\$FALLBACK}"

# AUR helper. Override with in your environment with AUR_HELPER
# must support basic pacman command line options (-S, -Q, etc.)
AUR_HELPER=${AUR_HELPER:-packer}

# ==============================================================================
# COMMAND LINE OPTIONS, RUNTIME OPTION REPORT VALUES & HELP
# ==============================================================================

OPT_SYSTEM_UPDATE_=(
[FLAG]='S'
[STATE]='false'
[STATE_SET]='true'
[CONFLICTS]='CONFIG_UPDATE'
[ALERT]='System update OFF; No system files will be updated.'
[ALERT_SET]='System update ON; Live system files will be overwritten.'
[USAGE]="Update LIVE system files/packages from ${SCRIPTNAME} config."
[PRERUN_CONDITIONALS]='FORCE FULL_FORCE'
[PRERUN]='SYSTEM UPDATE MODE will PROMPT for the following:

* Install groups/packages listed in ${SCRIPTNAME} config
* Uninstall groups/packages not listed in ${SCRIPTNAME} config
* Install new group packages, remove old group packages (if any)
* Install ${SCRIPTNAME} files to system from:\n  ${FILES_DIRPATH}'
[PRERUN_FORCE]='SYSTEM UPDATE (FORCE) MODE will AUTOMATICALLY execute:

* Install groups/packages listed in ${SCRIPTNAME} config
* Install new group packages (if any)
* Install ${SCRIPTNAME} files to system from\n  ${FILES_DIRPATH}.$(If_Opt_Display AUTO_REMOVE "\n* Remove group packages if no longer part of group list in the repos. (-${OPT_AUTO_REMOVE_[FLAG]})\n* Remove fully installed groups if not listed in ${SCRIPTNAME} groups list. (-${OPT_AUTO_REMOVE_[FLAG]})\n* Remove packages if not listed in ${SCRIPTNAME} packages list. (-${OPT_AUTO_REMOVE_[FLAG]})")$(If_No_Opt_Display AUTO_REMOVE "\n* Non-listed groups/packages and old group packages will not be removed\n  (use the -${OPT_AUTO_REMOVE_[FLAG]} option to enable automatic removal)")'
[PRERUN_FULL_FORCE]=''
)
OPT_CONFIG_UPDATE_=(
[FLAG]='U'
[STATE]='false'
[STATE_SET]='true'
[ALERT]='${SCRIPTNAME} config update OFF; ${SCRIPTNAME} files will not be updated.'
[ALERT_SET]='${SCRIPTNAME} config update ON; Updated files saved to ${SCRIPTNAME} config.'
[USAGE]="Update files in ${SCRIPTNAME} config directory."
[PRERUN_CONDITIONALS]='FORCE FULL_FORCE'
[PRERUN]='$(Upper_Case ${SCRIPTNAME}) CONFIG UPDATE MODE will PROMPT for the following:

* Add installed group names to the ${SCRIPTNAME} groups list.
* Add installed package names to the ${SCRIPTNAME} packages list.
* Remove non-installed package names from ${SCRIPTNAME} packages list.
* Save a snapshot of files listed in the ${SCRIPTNAME} files list to:\n  ${FILES_DIRPATH}'
[PRERUN_FORCE]='$(Upper_Case ${SCRIPTNAME}) CONFIG UPDATE (FORCE) MODE will AUTOMATICALLY execute:

* Add installed package names to the ${SCRIPTNAME} packages list.
* Save a snapshot of files listed in the ${SCRIPTNAME} files list to:\n  ${FILES_DIRPATH}. $(If_Opt_Display AUTO_REMOVE "\n* Remove non-installed group names from ${SCRIPTNAME} groups list. (-${OPT_AUTO_REMOVE_[FLAG]})\n* Remove non-installed package names from ${SCRIPTNAME} packages list. (-${OPT_AUTO_REMOVE_[FLAG]})") $(If_No_Opt_Display AUTO_REMOVE "\n* Non-installed groups/packages will not be removed from ${SCRIPTNAME} lists\n  (use the -${OPT_AUTO_REMOVE_[FLAG]} option to enable automatic removal)")'
[PRERUN_FULL_FORCE]=''
)
OPT_SKIP_PACKAGES_=(
[FLAG]='a'
[STATE]='false'
[STATE_SET]='true'
[ALERT]='Skip pAckages OFF; Groups and packages will be processed normally.'
[ALERT_SET]='Skip pAckages ON; Groups and packages will not be processed.'
[USAGE]='Skip pAckages; Groups and packages will not be processed.'
)
OPT_SKIP_FILES_=(
[FLAG]='i'
[STATE]='false'
[STATE_SET]='true'
[ALERT]='Skip fIles OFF; Files will be processed normally.'
[ALERT_SET]='Skip fIles ON; Files will not be processed.'
[USAGE]='Skip fIles; Files will not be processed.'
)
OPT_FORCE_=(
[FLAG]='f'
[STATE]='false'
[STATE_SET]='true'
[ALERT]='Force mode OFF; Prompt before file write operations.'
[ALERT_SET]='Force mode ON; No prompts presented (CAUTION).'
[USAGE]='Force all write operations; no prompts will be given.'
[PRERUN]=''
)
OPT_FULL_FORCE_=(
[FLAG]='F'
[STATE]='false'
[STATE_SET]='true'
[ALERT]='Full Force mode OFF; Prompt displayed before script runs.'
[ALERT_SET]='Full Force mode ON; Prompt not displayed before script runs.'
[USAGE]='DANGER: Force mode with automatic execution, NO-INITIAL PROMPT.'
)
OPT_AUTO_REMOVE_=(
[FLAG]='R'
[STATE]='false'
[STATE_SET]='true'
[ALERT]='Auto-Remove OFF; Remove/Uninstall action default to NO.'
[ALERT_SET]='Auto-Remove ON; Remove/Uninstall action default to YES.'
[USAGE]='DANGER: Auto-Remove; Remove/Uninstall actions default to YES.'
[PRERUN_CONDITIONALS]='FORCE FULL_FORCE SIMPLE_QUERY'
[PRERUN]='WARNING: Auto-Remove is ON but will have no effect when run in 
non-force mode (prompts are still presented for user-selection at each 
write/add/remove operation). Running in -${OPT_FORCE_[FLAG]} force mode with 
Auto-Remove would automatically set uninstall/remove actions to YES.'
[PRERUN_SIMPLE_QUERY]='NOTE: Auto-Remove will have no effect when run in query mode (query mode makes no changes, additions, removals).'
[PRERUN_FORCE]='WARNING: Auto-Remove is ON and with the current force option set, any removal actions (uninstalls of packages and groups, removal of items from the package list) will be automatically performed'
[PRERUN_FULL_FORCE]=''
[PRERUN_CONFIG_UPDATE]='WARNING: $(Upper_Case ${SCRIPTNAME}) CONFIG FILES WILL BE OVERWRITTEN WITHOUT BACKUP.'
)
OPT_GROUP_CURRENCY_CHECK_=(
[FLAG]='g'
[STATE]='true'
[STATE_SET]='false'
[ALERT]='Suppress group check OFF; Groups will be checked for currency.'
[ALERT_SET]='Suppress group check ON; Groups will not be checked for currency.'
[USAGE]='Suppress group currency check; Skip checking current group packages.'
)
#OPT_FILES_DIFF_DISPLAY_=(
#[FLAG]='d'
#[STATE]='false'
#[STATE_SET]='true'
#[ALERT]='Files diff OFF; No file diff report will be displayed.'
#[ALERT_SET]='File diff ON; File diff report will be displayed.'
#[USAGE]='Files will be diffed with system files and result displayed.'
#)
#OPT_GIT_UPDATE_=(
#[FLAG]='c'
#[STATE]='false'
#[STATE_SET]='true'
#[ALERT]='Git commit update OFF; No git commit/push after config update.'
#[ALERT_SET]='Git commit update ON; Git commit/push after config update.'
#[USAGE]="Git commit and push ${SCRIPTNAME} config directory if it is a repository."
#)
#OPT_PACMAN_UPDATE_=(
#[FLAG]='y'
#[STATE]='false'
#[STATE_SET]='true'
#[ALERT]='Pacman update OFF; Package list will not be refreshed.'
#[ALERT_SET]='Pacman update ON; Package list will be downloaded.'
#[USAGE]='Update pacman package master list (pacman -Sy).'
#)
OPT_CONFIG_DIRPATH_=(
[FLAG]='p:'
[STATE]="${CONFIG_DIRPATH_DEFAULT}"
[STATE_SET]=''
[ALERT]="Default ${SCRIPTNAME}: ${CONFIG_DIRPATH_DEFAULT}."
[ALERT_SET]='Custom ${SCRIPTNAME}: ${CONFIG_DIRPATH}.'
[USAGE]="Specify full path to a custom ${SCRIPTNAME} config directory."
)
OPT_SIMPLE_QUERY_=(
[FLAG]='Q'
[STATE]='false'
[STATE_SET]='true'
[CONFLICTS]='CONFIG_UPDATE SYSTEM_UPDATE'
[ALERT]='Simple Query OFF; Run with this ON to report with no system changes.'
[ALERT_SET]='Simple Query ON; Report shown; no changes made to system.'
[USAGE]="SAFELY queries & reports system/${SCRIPTNAME} config state; no changes."
[PRERUN_CONDITIONALS]='FORCE FULL_FORCE'
[PRERUN]='SIMPLE QUERY MODE: SAFELY Queries and reports system/${SCRIPTNAME} config state; no changes made.'
[PRERUN_FORCE]=''
[PRERUN_FULL_FORCE]=''
)
OPT_BACKUP_MODE_=(
[FLAG]='b'
[STATE]="${DEFAULT_BACKUP_MODE}"
[STATE_SET]='none'
[ALERT]='Backups ON; Files will be saved in place with backup suffix.'
[ALERT_SET]='Backups OFF; Files will be overwritten.'
[USAGE]='Turn off backups when copying new files to an existing path.'
[PRERUN_CONDITIONALS]='FULL_FORCE'
[PRERUN]='WARNING: UPDATED FILES WILL BE OVERWRITTEN WITHOUT BACKUP.'
[PRERUN_FULL_FORCE]=''
)
OPT_HELP_=(
[FLAG]='h'
[STATE]='false'
[STATE_SET]='true'
[ALERT]='Display option and usage summary.'
[USAGE]='${OPT_HELP_[ALERT]}'
)
USAGE_CONFIG_STATE="\nSTATE SUMMARY:\n${HR}
DEFAULT $(Upper_Case ${SCRIPTNAME}) CONFIG PATH: ${CONFIG_DIRPATH_DEFAULT} 
Change with -${OPT_CONFIG_DIRPATH_[FLAG]} <custompath> or set ${CONFIG_DIRPATH_ENVVARNAME} in your environment.

CURRENT AUR HELPER: ${AUR_HELPER}
Change with AUR_HELPER in your environment."
USAGE_SUMMARY="\nUSAGE SUMMARY:\n${HR}
${SCRIPTNAME} -${OPT_SIMPLE_QUERY_[FLAG]}\tShow a report; no changes made to system (try this first!)
${SCRIPTNAME} -${OPT_CONFIG_UPDATE_[FLAG]}\tCreate a new or update existing ${SCRIPTNAME} config
${SCRIPTNAME} -${OPT_SYSTEM_UPDATE_[FLAG]}\tUpdate live system to match current ${SCRIPTNAME} config

Adding -${OPT_FORCE_[FLAG]} will skip normal prompts prior to write operations. 
Adding -${OPT_FULL_FORCE_[FLAG]} will skip the initial prompt as well as all subsequent prompts.

FIRST RUN / AUTOMATIC UPDATE:\n${HR}
${SCRIPTNAME} -${OPT_CONFIG_UPDATE_[FLAG]}${OPT_FORCE_[FLAG]}\tAutomatically create a ${SCRIPTNAME} config from system state.

$(Upper_Case ${SCRIPTNAME}) DEFAULT CONFIG LOCATION:\n${HR}\n${CONFIG_DIRPATH_DEFAULT}
"
#See options summary above for other features or consult the ${SCRIPTNAME} man page using the command: man ${SCRIPTNAME}

# ==============================================================================
# EXECUTION SEQUENCE
# ==============================================================================

UNIT_SEQUENCE="Initialize Groups Packages Files Report Clean_Up"

# ==============================================================================
# INITIALIZE
# ==============================================================================

UNIT_Initialize ()
{
trap 'TRAP_Alert; UNIT_Report; UNIT_Clean_Up; exit' INT TERM EXIT
TMPDIR="$(mktemp -d --tmpdir $SCRIPTNAME.XXX)"; CLEANUP+=('rm -rf $TMPDIR')

# identify default user group for files
# we know USER from $USER environment var
touch "$TMPDIR/testfile"
GROUP="$(stat -c '%G' ${TMPDIR}/testfile)"

# make sure we have our aur helper installed
Install_Package_From_AUR "$AUR_HELPER"

# initialize options from OPT_ arrays
Options_Initialize || Fail_Critically "Error initializing options."

# final path set based on options
GROUPS_FILEPATH="${CONFIG_DIRPATH}/${GROUPS_FILENAME}"
PACKAGES_FILEPATH="${CONFIG_DIRPATH}/${PACKAGES_FILENAME}"
FILES_FILEPATH="${CONFIG_DIRPATH}/${FILES_FILENAME}"
FILES_DIRPATH="${CONFIG_DIRPATH}/${FILES_DIRNAME}"
POST_FILEPATH="${CONFIG_DIRPATH}/${POST_FILENAME}"

# set force if full force
Is_True ${FULL_FORCE} && FORCE=true

# set execution mode
if   Is_True ${SIMPLE_QUERY:-}; then MODE=QUERY
elif Is_True ${CONFIG_UPDATE:-}; then MODE=CONFIG
elif Is_True ${SYSTEM_UPDATE:-}; then MODE=SYSTEM
else Usage; UNIT_Clean_Up; exit
fi

# options summary and prerun alert
local _option_summary="$(Options_Summary)"
local _option_prerun="$(Options_Prerun)"
[[ -z ${_option_summary:-} ]] || UI_Passive_Alert "\n$SCRIPTNAME\n${HR}\n${_option_summary}"
[[ -z ${_option_prerun:-} ]] || Query "\n${_option_prerun}\n\nProceed?"

# locate/make config directory if in update config mode, otherwise warn 
# user and exit
if [[ ! -d "${CONFIG_DIRPATH}" ]] && Is_True ${SYSTEM_UPDATE}
then
    local _alert=
    if [[ "${CONFIG_DIRPATH}" == "${CONFIG_DIRPATH_DEFAULT}" ]]
    then
    _alert+="No config directory found at default path ${CONFIG_DIRPATH}.  Please run ${SCRIPTNAME} again in config update mode (command line 
    flag: -${OPT_CONFIG_UPDATE_[FLAG]%:}) to automatically create a ${SCRIPTNAME} config directory at this default location. Alternately,
    locate an existing ${SCRIPTNAME} config directory (using the  -${OPT_CONFIG_DIRPATH_[FLAG]%:} <custompath> command line option)."
    else
    _alert+="No config directory found at custom path ${CONFIG_DIRPATH}.  Please run ${SCRIPTNAME} again in config update mode (command line 
    flag: -${OPT_CONFIG_UPDATE_[FLAG]%:}) to automatically create a ${SCRIPTNAME} config directory at this custom location.
    Alternately, run again without the -${OPT_CONFIG_DIRPATH_[FLAG]%:} <custompath> option to attempt to use the default ${SCRIPTNAME} config 
    directory (${CONFIG_DIRPATH_DEFAULT})."
    fi
    UI_Passive_Alert "\nMISSING CONFIG:\n$HR\n$(echo -e ${_alert})"
    exit 0
else
    mkdir -p ${CONFIG_DIRPATH}
fi
UI_Passive_Alert "\nConfig directory: ${CONFIG_DIRPATH}"
}

# ==============================================================================
# GROUPS
# ==============================================================================

UNIT_Groups ()
{

Is_True ${SKIP_PACKAGES} && return || true

Unit_Report "${GROUPS_FILEPATH}"

# DETECT GROUPS
# ----------------------------------------------------------------------
GROUPS_POTENTIAL=$(pacman -Qg | awk '{print $1}' | sort -u)
UI_Incremental_Alert "\nInitializing..."
local _group
for _group in ${GROUPS_POTENTIAL}
do
    # get percentage of group already installed
    # sort -u required (via Normalize_To_List) as there can be duplicate package 
    # reporting if testing repos are live, for instance
    GROUP_PACKAGES_SYST_[${_group}]="$(pacman -Qgq $_group)"
    GROUP_PACKAGES_REPO_[${_group}]="$(pacman -Sgq $_group)"
    local _group_count_local=$(echo ${GROUP_PACKAGES_SYST_[${_group}]} | Normalize_To_List | wc -l)
    local _group_count_repo=$(echo ${GROUP_PACKAGES_REPO_[${_group}]} | Normalize_To_List | wc -l)
    local _threshold=12
    local _score=$(echo $((($_group_count_repo*10)/$_group_count_local)))
    if [[ $_score -le $_threshold ]]
    then
        GROUPS_SYST+="$_group "
        UI_Incremental_Alert ".."
    fi
done
UI_Passive_Alert "Done\n"
#Progress_Report GROUPS_SYST "INSTALLED GROUPS (DETECTED>80% MEMBER PACKAGE INSTALL)"

# READ GROUPS FILE
# ----------------------------------------------------------------------
GROUPS_CONF="$(Read_File_Drop_Comments ${GROUPS_FILEPATH} | Normalize_To_List)"
GROUPS_GOOD="$(Set_Op_Intersection "${GROUPS_CONF}" "${GROUPS_SYST}")"
GROUPS_MISS_SYST="$(Set_Op_Difference "${GROUPS_CONF}" "${GROUPS_SYST}")"
GROUPS_MISS_CONF="$(Set_Op_Difference "${GROUPS_SYST}" "${GROUPS_CONF}")"
GROUPS_INST_CONF=
GROUPS_REMO_CONF=
GROUPS_INST_SYST=
GROUPS_REMO_SYST=

# CHECK GROUP FOR NEW/REMOVED PACKAGES
# ----------------------------------------------------------------------
if Is_True ${GROUP_CURRENCY_CHECK}; then
local _group
for _group in ${GROUPS_SYST}
do
    local _missing="$(Set_Op_Difference "${GROUP_PACKAGES_REPO_[$_group]}" "${GROUP_PACKAGES_SYST_[$_group]}")"
    if [[ -n ${_missing:-} ]]
    then
        GROUP_PACKAGES_MISS_SYST_[${_group}]="${_missing%% *}"
        [[ -n ${GROUP_PACKAGES_MISS_SYST:-} ]] \
        && GROUP_PACKAGES_MISS_SYST+="\n(${_group}: ${_missing%% *})" \
        || GROUP_PACKAGES_MISS_SYST+="(${_group}: ${_missing%% *})"
    fi
    local _removed="$(Set_Op_Difference "${GROUP_PACKAGES_SYST_[${_group}]}" "${GROUP_PACKAGES_REPO_[${_group}]}")"
    if [[ -n ${_removed:-} ]]
    then
        GROUP_PACKAGES_MISS_REPO_[${_group}]="${_removed%% *}"
        [[ -n ${GROUP_PACKAGES_MISS_REPO:-} ]] \
        && GROUP_PACKAGES_MISS_REPO+="\n(${_group}: ${_removed%% *})" \
        || GROUP_PACKAGES_MISS_REPO+="(${_group}: ${_removed%% *})"
    fi
done
fi # end of group currency check test

CHANGE_MADE=false
case $MODE in
CONFIG) # Condition add all, conditional remove all

    # GROUPS MISSING FROM CONFIG
    # -------------------------------------------------------------------------
    if [[ -n ${GROUPS_MISS_CONF[*]:-} ]]; then
    UI_Backup_Alert "\nADD GROUPS THAT ARE INSTALLED BUT NOT IN $(Upper_Case ${SCRIPTNAME}) GROUPS LIST?\n${HR} \nThe following groups are installed to 
    your system but are not listed in your ${SCRIPTNAME} groups list. Please choose whether to add each item to the ${SCRIPTNAME} groups list"
    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]='GROUPS_MISS_CONF'
    [QUERY_STRING]='\n${_item}\nAdd group name to ${SCRIPTNAME} groups list?'
    [ACTION_CMD]='Add_To GROUPS_INST_CONF "${_item}"; Remove_From GROUPS_MISS_CONF "${_item}"; CHANGE_MADE=true;'
    [EXECUTED_CMD]='Noforce_Alert "(${_item} added)"'
    [SKIPPED_CMD]='Noforce_Alert "(${_item} skipped)"'
    [FAILED_CMD]='Noforce_Alert "(${_item} add failed!)"'
    [FORCE_VALUE]='${FORCE}'
    [DEFAULT_CHOICE]='true'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # GROUPS MISSING FROM SYSTEM
    # -------------------------------------------------------------------------
    if [[ -n ${GROUPS_MISS_SYST[*]:-} ]]; then
    UI_Backup_Alert "\nREMOVE GROUPS THAT AREN'T CURRENTLY INSTALLED?\n${HR} \nThe following groups are not installed on your system but *are* 
    listed in your ${SCRIPTNAME} group list. Please choose whether to remove each item from the ${SCRIPTNAME} group list"
    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]='GROUPS_MISS_SYST'
    [QUERY_STRING]='\n${_item}\nRemove group name from ${SCRIPTNAME} config?'
    [ACTION_CMD]='Add_To GROUPS_REMO_CONF "${_item}"; Remove_From GROUPS_MISS_SYST "${_item}"; CHANGE_MADE=true; '
    [EXECUTED_CMD]='Noforce_Alert "(${_item} removed)";'
    [SKIPPED_CMD]='Noforce_Alert "(${_item} skipped)"'
    [FAILED_CMD]='Noforce_Alert "(${_item} remove failed!)"'
    [FORCE_VALUE]='${FORCE}'
    [DEFAULT_CHOICE]='${AUTO_REMOVE}'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # UPDATE GROUPS LIST
    if [[ -n ${GROUPS_INST_CONF:-}${GROUPS_REMO_CONF:-} ]]
    then

        # copy current config packages file if present
        [[ -e "${GROUPS_FILEPATH}" ]] && cp "${GROUPS_FILEPATH}" "${TMPDIR}/${GROUPS_FILENAME}"

        # add newly added packages to list
        if [[ -n ${GROUPS_INST_CONF:-} ]]
        then
            echo -e "\n# GROUPS added by ${SCRIPTNAME} on $(date +%F)" >> "${TMPDIR}/${GROUPS_FILENAME}"
            echo "# ${HR%--}" >> "${TMPDIR}/${GROUPS_FILENAME}"
            echo ${GROUPS_INST_CONF} | fmt -w 80 >> "${TMPDIR}/${GROUPS_FILENAME}"
        fi

        # include a summary of removed packages
        if [[ -n ${GROUPS_REMO_CONF:-} ]]
        then
            local _group_name
            for _group_name in ${GROUPS_REMO_CONF}
            do
                Remove_Item_From_File "${_group_name}" "${TMPDIR}/${GROUPS_FILENAME}"
            done
            echo -e "\n# GROUPS REMOVED by ${SCRIPTNAME} on $(date +%F)" >> "${TMPDIR}/${GROUPS_FILENAME}"
            echo "# ${HR%--}" >> "${TMPDIR}/${GROUPS_FILENAME}"
            echo "# $(echo ${GROUPS_REMO_CONF})" >> "${TMPDIR}/${GROUPS_FILENAME}"
        fi

        # atomic write
        install -CD --backup=${BACKUP_MODE} -S${BACKUP_SUFFIX} "${TMPDIR}/${GROUPS_FILENAME}" "${GROUPS_FILEPATH}" \
        && MODE_FINAL="SUCCESSFULLY UPDATED GROUPS LIST" \
        || MODE_FINAL="FAILED TO UPDATE GROUPS LIST!"

    else
        MODE_FINAL= #"NO CHANGES MADE; GROUPS LIST NOT UPDATED"
    fi
;;
SYSTEM)

    # GROUPS MISSING FROM CONFIG
    # -------------------------------------------------------------------------
    if [[ -n ${GROUPS_MISS_CONF[*]:-} ]]; then
    UI_Backup_Alert "\nUNINSTALL GROUPS THAT ARE NOT IN $(Upper_Case ${SCRIPTNAME}) FILES LIST?\n${HR} \nThe following groups are installed to your system but are not listed in your ${SCRIPTNAME} groups list. Please choose whether to uninstall each group from your system to match the ${SCRIPTNAME} list"
    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]='GROUPS_MISS_CONF'
    [QUERY_STRING]='\n${_item}\nUninstall group?'
    [ACTION_CMD]='Uninstall_Package "${_item}"'
    [EXECUTED_CMD]='Noforce_Alert "(${_item} uninstalled)"; Add_To GROUPS_REMO_SYST "${_item}"; Remove_From GROUPS_MISS_CONF "${_item}"; CHANGE_MADE=true; '
    [SKIPPED_CMD]='Noforce_Alert "(${_item} skipped)"'
    [FAILED_CMD]='Noforce_Alert "(${_item} uninstall failed!)"'
    [FORCE_VALUE]='${FORCE}'
    [DEFAULT_CHOICE]='${AUTO_REMOVE}'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # GROUPS MISSING FROM SYSTEM
    # -------------------------------------------------------------------------
    if [[ -n ${GROUPS_MISS_SYST[*]:-} ]]; then
        UI_Backup_Alert "\nREMOVE GROUP NAMES IN $(Upper_Case ${SCRIPTNAME}) THAT AREN'T CURRENTLY INSTALLED?\n${HR} \nThe following groups are not installed on your system but *are* listed in your ${SCRIPTNAME} groups list. Please choose whether to install each group to your system"
    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]='GROUPS_MISS_SYST'
    [QUERY_STRING]='\n${_item}\nInstall group?'
    [ACTION_CMD]='Install_Package "${_item}"'
    [DEFAULT_CHOICE]='true'
    [EXECUTED_CMD]='Noforce_Alert "(${_item} installed)"; Add_To GROUPS_INST_SYST "${_item}"; Remove_From GROUPS_MISS_SYST "${_item}"; CHANGE_MADE=true;'
    [SKIPPED_CMD]='Noforce_Alert "(${_item} skipped)"'
    [FAILED_CMD]='Noforce_Alert "(${_item} installed failed!)"'
    [FORCE_VALUE]='${FORCE}'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    if Is_True ${GROUP_CURRENCY_CHECK}; then
        if [[ -n "${GROUP_PACKAGES_MISS_SYST_[*]:-}" ]]
        then # there are some missing packages
            #local _group
            declare -g a_group
            for a_group in ${!GROUP_PACKAGES_MISS_SYST_[*]}; do
            if [[ -n "${GROUP_PACKAGES_MISS_SYST_[$a_group]}" ]]; then
            UI_Passive_Alert "\nPACKAGES MISSING FROM GROUPS ${a_group}\nThe following packages are listed as group members in the 
            repository but are not installed locally. Please choose whether to install each package to your system"
            Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
            [LIST_VAR_NAME]="GROUP_PACKAGES_MISS_SYST_[${a_group}]"
            [QUERY_STRING]='\n${_item}\nInstall group member package?'
            [ACTION_CMD]='Install_Package "${_item}"'
            [DEFAULT_CHOICE]='true'
            [EXECUTED_CMD]='Noforce_Alert "(${_item} installed)"; Add_To GROUP_PACKAGES_INST_SYST ${_item}; Remove_From GROUP_PACKAGES_MISS_SYST_[$a_group] "${_item}"; CHANGE_MADE=true;'
            [SKIPPED_CMD]='Noforce_Alert "(${_item} skipped)"'
            [FAILED_CMD]='Noforce_Alert "(${_item} installed failed!)"'
            [FORCE_VALUE]='${FORCE}'
            ); Ask_Auto_Action ASK_AUTO_SOURCE_;
            fi
            done
            unset a_group
        fi
        if [[ -n "${GROUP_PACKAGES_MISS_REPO_[*]:-}" ]]
        then # there are some possibly removed packages
            #local _group
            declare -g a_group
            for a_group in ${!GROUP_PACKAGES_MISS_REPO_[*]}; do
            if [[ -n "${GROUP_PACKAGES_MISS_REPO_[$a_group]}" ]]; then
            UI_Passive_Alert "\nGROUP PACKAGES REMOVED FROM REPO (group: ${a_group}):\nThe following installed packages are listed as group members locally but
            are no longer listed as group members in the repository, indicating they may have been removed from the group. Please choose whether to 
            uninstall each package from your system"
            Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
            [LIST_VAR_NAME]="GROUP_PACKAGES_MISS_REPO_[${a_group}]"
            [QUERY_STRING]='\n${_item}\nUninstall old group member package?'
            [ACTION_CMD]='Uninstall_Package "${_item}"'
            [EXECUTED_CMD]='Noforce_Alert "(${_item} uninstalled)"; Add_To GROUP_PACKAGES_REMO_SYST ${_item}; Remove_From GROUP_PACKAGES_MISS_REPO_[$a_group] "${_item}"; CHANGE_MADE=true;'
            [SKIPPED_CMD]='Noforce_Alert "(${_item} skipped)"'
            [FAILED_CMD]='Noforce_Alert "(${_item} uninstalled failed!)"'
            [FORCE_VALUE]='${FORCE}'
            [DEFAULT_CHOICE]='${AUTO_REMOVE}'
            ); Ask_Auto_Action ASK_AUTO_SOURCE_;
            fi
            done
            unset a_group
        fi
    fi

;;
esac

# TODO: move this to the system section
# section
# regen packages list in case of changes to group packages
if Is_True ${CHANGE_MADE}
then
    local _group
    for _group in ${GROUPS_SYST}
    do
        GROUP_PACKAGES_SYST_[${_group}]="$(pacman -Qgq $_group)"
        GROUP_PACKAGES_REPO_[${_group}]="$(pacman -Sgq $_group)"
    done
fi

# TODO: add group packages loop
Progress_Report GROUPS_GOOD "GROUPS UP TO DATE: group listed in ${SCRIPTNAME} and >80% local install"
Progress_Report GROUPS_MISS_CONF "GROUPS NOT IN ${SCRIPTNAME}: installed groups not listed in ${SCRIPTNAME} config"
Progress_Report GROUPS_MISS_SYST "GROUPS NOT INSTALLED: groups listed in ${SCRIPTNAME} config but not installed"
Progress_Report GROUPS_INST_SYST "NEW GROUP INSTALLS: newly installed groups to match existing list in ${SCRIPTNAME}"
Progress_Report GROUPS_INST_CONF "GROUPS ADDED TO ${SCRIPTNAME}: existing installed groups added to ${SCRIPTNAME} list"
Progress_Report GROUPS_REMO_SYST "GROUP UNINSTALLS: groups uninstalled, matches groups not listed in ${SCRIPTNAME}"
Progress_Report GROUPS_REMO_CONF "GROUPS REMOVED FROM ${SCRIPTNAME}: matches groups not installed to system"
Progress_Report GROUP_PACKAGES_MISS_SYST "GROUP PACKAGES; MISSING?: group member packages not installed"
Progress_Report GROUP_PACKAGES_MISS_REPO "GROUP PACKAGES; REMOVED?: installed packages not listed in group on repo"
[[ -z ${MODE_FINAL:-} ]] || Unit_Report "\n${MODE_FINAL}"

}

# ==============================================================================
# PACKAGES
# ==============================================================================

UNIT_Packages ()
{

Is_True ${SKIP_PACKAGES} && return || true

Unit_Report "${PACKAGES_FILEPATH}"

# TODO: deal with timeline of updating the group packages
#PACKAGES_LOCAL_ALLGROUPS="$(pacman -Qgq | Normalize_To_List)"

local _packages_groups="$(echo "${GROUP_PACKAGES_SYST_[*]}" | Normalize_To_List)"
local _packages_explicit="$(pacman -Qeq)"
local _packages_manual="$(pacman -Qmq)"
local _packages_repo="$(Set_Op_Difference "${_packages_explicit}" "${_packages_manual}")"
local _packages_noaur="$(Set_Op_Difference "${_packages_explicit}" "${_packages_manual}")"
local _packages_repo_allknown="$(pacman -Ssq)"

local _packages_config_all="$(Read_File_Drop_Comments ${PACKAGES_FILEPATH} | Normalize_To_List)"

AUR_CONF="$(Set_Op_Difference "${_packages_config_all}" "${_packages_repo_allknown}")"
PACKAGES_CONF="$(Set_Op_Difference "${_packages_config_all}" "${AUR_CONF}")"

PACKAGES_SYST="$(Set_Op_Difference "${_packages_repo}" "${_packages_groups}")"
AUR_SYST="$(Set_Op_Intersection "${_packages_explicit}" "${_packages_manual}")"

PACKAGES_MISS_SYST="$(Set_Op_Difference "${PACKAGES_CONF}" "${PACKAGES_SYST}")"
PACKAGES_MISS_CONF="$(Set_Op_Difference "${PACKAGES_SYST}" "${PACKAGES_CONF}")"
AUR_MISS_SYST="$(Set_Op_Difference "${AUR_CONF}" "${AUR_SYST}")"
AUR_MISS_CONF="$(Set_Op_Difference "${AUR_SYST}" "${AUR_CONF}")"

PACKAGES_GOOD="$(Set_Op_Intersection "${PACKAGES_CONF}" "${PACKAGES_SYST}")"
AUR_GOOD="$(Set_Op_Intersection "${AUR_CONF}" "${AUR_SYST}")"
CHANGE_MADE=false

case $MODE in
CONFIG)

    # PACKAGES MISSING FROM CONFIG
    # -------------------------------------------------------------------------
    if [[ -n ${PACKAGES_MISS_CONF[*]:-} ]]; then
    UI_Backup_Alert "\nADD PACKAGES THAT ARE INSTALLED BUT NOT IN $(Upper_Case ${SCRIPTNAME}) FILES LIST?\n${HR} \nThe following packages are installed to 
    your system but are not listed in your ${SCRIPTNAME} package list. Please 
    choose whether to add each item to the ${SCRIPTNAME} package list"
    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]='PACKAGES_MISS_CONF'
    [QUERY_STRING]='\n${_item}\nAdd package name to ${SCRIPTNAME} config?'
    [ACTION_CMD]='Add_To PACKAGES_INST_CONF "${_item}"; Remove_From PACKAGES_MISS_CONF "${_item}"; CHANGE_MADE=true;'
    [DEFAULT_CHOICE]='true'
    [EXECUTED_CMD]='Noforce_Alert "(${_item} added)"'
    [SKIPPED_CMD]='Noforce_Alert "(${_item} skipped)"'
    [FAILED_CMD]='Noforce_Alert "(${_item} add failed!)"'
    [FORCE_VALUE]='${FORCE}'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # AUR MISSING FROM CONFIG
    # -------------------------------------------------------------------------
    if [[ -n ${AUR_MISS_CONF[*]:-} ]]; then
    UI_Backup_Alert "\nADD AUR PACKAGES THAT ARE INSTALLED BUT NOT IN $(Upper_Case ${SCRIPTNAME}) FILES LIST?\n${HR} \nThe following aur packages are 
    installed to your system but are not listed in your ${SCRIPTNAME} aur package list.  Please choose whether to add each item to the ${SCRIPTNAME} 
    package list"
    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]='AUR_MISS_CONF'
    [QUERY_STRING]='\n${_item}\nAdd aur package name to ${SCRIPTNAME} config?'
    [ACTION_CMD]='Add_To AUR_INST_CONF "${_item}"; Remove_From AUR_MISS_CONF "${_item}"; CHANGE_MADE=true; '
    [DEFAULT_CHOICE]='true'
    [EXECUTED_CMD]='Noforce_Alert "(${_item} added)";'
    [SKIPPED_CMD]='Noforce_Alert "(${_item} skipped)"'
    [FAILED_CMD]='Noforce_Alert "(${_item} add failed!)"'
    [FORCE_VALUE]='${FORCE}'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # PACKAGES MISSING FROM SYSTEM
    # -------------------------------------------------------------------------
    if [[ -n ${PACKAGES_MISS_SYST[*]:-} ]]; then
    UI_Backup_Alert "\nREMOVE PACKAGES FROM $(Upper_Case ${SCRIPTNAME}) THAT AREN'T CURRENTLY INSTALLED?\n${HR} \nThe following packages are not installed on your system but *are* listed in your ${SCRIPTNAME} package list. Please choose whether to remove each item from the ${SCRIPTNAME} package list"
    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]='PACKAGES_MISS_SYST'
    [QUERY_STRING]='\n${_item}\nRemove package name from ${SCRIPTNAME} config?'
    [ACTION_CMD]='Add_To PACKAGES_REMO_CONF "${_item}"; Remove_From PACKAGES_MISS_SYST "${_item}"; CHANGE_MADE=true; '
    [EXECUTED_CMD]='Noforce_Alert "(${_item} removed)";'
    [SKIPPED_CMD]='Noforce_Alert "(${_item} skipped)"'
    [FAILED_CMD]='Noforce_Alert "(${_item} remove failed!)"'
    [FORCE_VALUE]='${FORCE}'
    [DEFAULT_CHOICE]='${AUTO_REMOVE}'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # AUR MISSING FROM SYSTEM
    # -------------------------------------------------------------------------
    if [[ -n ${AUR_MISS_SYST[*]:-} ]]; then
    UI_Backup_Alert "\nREMOVE AUR PACKAGES FROM $(Upper_Case ${SCRIPTNAME}) THAT AREN'T CURRENTLY INSTALLED?\n${HR}\nThe following aur packages are not installed on your system but *are* listed in your ${SCRIPTNAME} aur package list. Please choose whether to remove each item from the ${SCRIPTNAME} package list"
    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]='AUR_MISS_SYST'
    [QUERY_STRING]='\n${_item}\nRemove aur package name from ${SCRIPTNAME} config?'
    [ACTION_CMD]='Add_To AUR_REMO_CONF "${_item}"; Remove_From AUR_MISS_SYST "${_item}"; CHANGE_MADE=true; '
    [EXECUTED_CMD]='Noforce_Alert "(${_item} removed)";'
    [SKIPPED_CMD]='Noforce_Alert "(${_item} skipped)"'
    [FAILED_CMD]='Noforce_Alert "(${_item} remove failed!)"'
    [FORCE_VALUE]='${FORCE}'
    [DEFAULT_CHOICE]='${AUTO_REMOVE}'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # UPDATE PACKAGES LIST
    if [[ -n ${PACKAGES_INST_CONF:-}${PACKAGES_REMO_CONF:-}${AUR_INST_CONF:-}${AUR_REMO_CONF:-} ]]
    then

        # copy current config packages file if present
        [[ -e "${PACKAGES_FILEPATH}" ]] && cp "${PACKAGES_FILEPATH}" "${TMPDIR}/${PACKAGES_FILENAME}"

        # add newly added packages to list
        if [[ -n ${PACKAGES_INST_CONF:-} ]]
        then
            echo -e "\n# PACKAGES added by ${SCRIPTNAME} on $(date +%F)" >> "${TMPDIR}/${PACKAGES_FILENAME}"
            echo "# ${HR%--}" >> "${TMPDIR}/${PACKAGES_FILENAME}"
            echo ${PACKAGES_INST_CONF} | fmt -w 80 >> "${TMPDIR}/${PACKAGES_FILENAME}"
        fi
        if [[ -n ${AUR_INST_CONF:-} ]]
        then
            echo -e "\n# AUR PACKAGES added by ${SCRIPTNAME} on $(date +%F)" >> "${TMPDIR}/${PACKAGES_FILENAME}"
            echo "# ${HR%--}" >> "${TMPDIR}/${PACKAGES_FILENAME}"
            echo ${AUR_INST_CONF} | fmt -w 80 >> "${TMPDIR}/${PACKAGES_FILENAME}"
        fi

        # include a summary of removed packages
        if [[ -n ${PACKAGES_REMO_CONF:-} ]]
        then
            local _package_name
            for _package_name in ${PACKAGES_REMO_CONF}
            do
                Remove_Item_From_File "${_package_name}" "${TMPDIR}/${PACKAGES_FILENAME}"
            done
            echo -e "\n# PACKAGES REMOVED by ${SCRIPTNAME} on $(date +%F)" >> "${TMPDIR}/${PACKAGES_FILENAME}"
            echo "# ${HR%--}" >> "${TMPDIR}/${PACKAGES_FILENAME}"
            echo "# $(echo ${PACKAGES_REMO_CONF})" >> "${TMPDIR}/${PACKAGES_FILENAME}"
        fi
        if [[ -n ${AUR_REMO_CONF:-} ]]
        then
            local _package_name
            for _package_name in ${AUR_REMO_CONF}
            do
                Remove_Item_From_File "${_package_name}" "${TMPDIR}/${PACKAGES_FILENAME}"
            done
            echo -e "\n# AUR PACKAGES REMOVED by ${SCRIPTNAME} on $(date +%F)" >> "${TMPDIR}/${PACKAGES_FILENAME}"
            echo "# ${HR%--}" >> "${TMPDIR}/${PACKAGES_FILENAME}"
            echo "# $(echo ${AUR_REMO_CONF})" >> "${TMPDIR}/${PACKAGES_FILENAME}"
        fi

        # atomic write
        install -CD --backup=${BACKUP_MODE} -S${BACKUP_SUFFIX} "${TMPDIR}/${PACKAGES_FILENAME}" "${PACKAGES_FILEPATH}" \
        && MODE_FINAL="SUCCESSFULLY UPDATED PACKAGES LIST" \
        || MODE_FINAL="FAILED TO UPDATE PACKAGES LIST!"

    else
        MODE_FINAL= #"NO CHANGES MADE; PACKAGES LIST NOT UPDATED"
    fi
;;
SYSTEM)

    # PACKAGES MISSING FROM CONFIG
    # -------------------------------------------------------------------------
    if [[ -n ${PACKAGES_MISS_CONF[*]:-} ]]; then
    UI_Backup_Alert "\nUNINSTALL PACKAGES THAT ARE NOT IN $(Upper_Case ${SCRIPTNAME}) FILES LIST?\n${HR} \nThe following packages are installed to your system but are not listed in your ${SCRIPTNAME} package list. Please choose whether to uninstall each item from your system to match the ${SCRIPTNAME} list"
    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]='PACKAGES_MISS_CONF'
    [QUERY_STRING]='\n${_item}\nUninstall package?'
    [ACTION_CMD]='Uninstall_Package "${_item}"'
    [EXECUTED_CMD]='Noforce_Alert "(${_item} uninstalled)"; Add_To PACKAGES_REMO_SYST "${_item}"; Remove_From PACKAGES_MISS_CONF "${_item}"; CHANGE_MADE=true; '
    [SKIPPED_CMD]='Noforce_Alert "(${_item} skipped)"'
    [FAILED_CMD]='Noforce_Alert "(${_item} uninstall failed!)"'
    [FORCE_VALUE]='${FORCE}'
    [DEFAULT_CHOICE]='${AUTO_REMOVE}'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # AUR MISSING FROM CONFIG
    # -------------------------------------------------------------------------
    if [[ -n ${AUR_MISS_CONF[*]:-} ]]; then
    UI_Backup_Alert "\nUNINSTALL AUR PACKAGES THAT ARE NOT IN $(Upper_Case ${SCRIPTNAME}) FILES LIST?\n${HR} \nThe following aur packages are installed to your system but are not listed in your ${SCRIPTNAME} aur package list. Please choose whether to uninstall each item from your system to match the ${SCRIPTNAME} list"
    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]='AUR_MISS_CONF'
    [QUERY_STRING]='\n${_item}\nUninstall aur package?'
    [ACTION_CMD]='Uninstall_Package "${_item}"'
    [EXECUTED_CMD]='Noforce_Alert "(${_item} uninstalled)"; Add_To AUR_REMO_SYST "${_item}"; Remove_From AUR_MISS_CONF "${_item}"; CHANGE_MADE=true; '
    [SKIPPED_CMD]='Noforce_Alert "(${_item} skipped)"'
    [FAILED_CMD]='Noforce_Alert "(${_item} uninstall failed!)"'
    [FORCE_VALUE]='${FORCE}'
    [DEFAULT_CHOICE]='${AUTO_REMOVE}'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # PACKAGES MISSING FROM SYSTEM
    # -------------------------------------------------------------------------
    if [[ -n ${PACKAGES_MISS_SYST[*]:-} ]]; then
    UI_Backup_Alert "\nINSTALL MISSING PACKAGES LISTED IN $(Upper_Case ${SCRIPTNAME})?\n${HR} \nThe following packages are not installed on your system but *are* 
    listed in your ${SCRIPTNAME} package list. Please choose whether to install each item to your system"
    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]='PACKAGES_MISS_SYST'
    [QUERY_STRING]='\n${_item}\nInstall package?'
    [ACTION_CMD]='Install_Package "${_item}"'
    [DEFAULT_CHOICE]='true'
    [EXECUTED_CMD]='Noforce_Alert "(${_item} installed)"; Add_To PACKAGES_INST_SYST "${_item}"; Remove_From PACKAGES_MISS_SYST "${_item}"; CHANGE_MADE=true;'
    [SKIPPED_CMD]='Noforce_Alert "(${_item} skipped)"'
    [FAILED_CMD]='Noforce_Alert "(${_item} installed failed!)"'
    [FORCE_VALUE]='${FORCE}'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # AUR MISSING FROM SYSTEM
    # -------------------------------------------------------------------------
    if [[ -n ${AUR_MISS_SYST[*]:-} ]]; then
    UI_Backup_Alert "\nINSTALL MISSING AUR PACKAGES LISTED IN $(Upper_Case ${SCRIPTNAME})?\n${HR} \nThe following aur packages are not installed on your system but
    *are* listed in your ${SCRIPTNAME} aur package list. Please choose whether to install each item to your system"
    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]='AUR_MISS_SYST'
    [QUERY_STRING]='\n${_item}\nInstall package?'
    [ACTION_CMD]='Install_Package_From_AUR_Helper "${_item}"'
    [DEFAULT_CHOICE]='true'
    [EXECUTED_CMD]='Noforce_Alert "(${_item} installed)"; Add_To AUR_INST_SYST "${_item}"; Remove_From AUR_MISS_SYST "${_item}"; CHANGE_MADE=true;'
    [SKIPPED_CMD]='Noforce_Alert "(${_item} skipped)"'
    [FAILED_CMD]='Noforce_Alert "(${_item} installed failed!)"'
    [FORCE_VALUE]='${FORCE}'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

;;
esac

Progress_Report PACKAGES_GOOD "PACKAGES UP TO DATE: packages listed in ${SCRIPTNAME} also installed on system"
Progress_Report AUR_GOOD "AUR UP TO DATE: aur packages listed in ${SCRIPTNAME} also installed on system"

Progress_Report PACKAGES_MISS_CONF "PACKAGES NOT IN ${SCRIPTNAME}: installed packages not listed in ${SCRIPTNAME} config"
Progress_Report AUR_MISS_CONF "AUR NOT IN ${SCRIPTNAME}: installed aur packages not listed in ${SCRIPTNAME} config"
Progress_Report PACKAGES_MISS_SYST "PACKAGES NOT INSTALLED: packages listed in ${SCRIPTNAME} config but not installed"
Progress_Report AUR_MISS_SYST "AUR NOT INSTALLED: aur packages listed in ${SCRIPTNAME} config but not installed"

Progress_Report PACKAGES_INST_SYST "NEW PACKAGE INSTALLS: newly installed packages to match existing list in ${SCRIPTNAME}"
Progress_Report AUR_INST_SYST "NEW AUR INSTALLS: newly installed aur packages to match existing list in ${SCRIPTNAME}"
Progress_Report PACKAGES_INST_CONF "PACKAGES ADDED TO ${SCRIPTNAME}: existing installed packages added to ${SCRIPTNAME} list"
Progress_Report AUR_INST_CONF "AUR ADDED TO ${SCRIPTNAME}: existing installed aur packages added to ${SCRIPTNAME} list"

Progress_Report PACKAGES_REMO_SYST "PACKAGE UNINSTALLS: packages uninstalled, matches packages not listed in ${SCRIPTNAME}"
Progress_Report AUR_REMO_SYST "AUR UNINSTALLS: aur packages uninstalled, matches packages not listed in ${SCRIPTNAME}"
Progress_Report PACKAGES_REMO_CONF "PACKAGES REMOVED FROM ${SCRIPTNAME}: matches packages not installed to system"
Progress_Report AUR_REMO_CONF "AUR REMOVED FROM ${SCRIPTNAME}: matches aur packages not installed to system"

[[ -z ${MODE_FINAL:-} ]] || Unit_Report "\n${MODE_FINAL}"

}

# ==============================================================================
# FILES
# ==============================================================================

UNIT_Files ()
{

Is_True ${SKIP_FILES} && return || true

# TODO: add garbage collection. when files present in files directory but not in 
# files list, there should be a prompt to remove
# FILES CHECK
# ----------------------------------------------------------------------

Read_File_Lines_To_Array "${FILES_FILEPATH}" FILES_ARRAY || true

if [[ -z ${FILES_ARRAY[*]:-} ]]
then
    Unit_Report "No file list. To save a snapshot of specific system 
    configuration files, make a line by line list of file paths in the following 
    location: ${FILES_FILEPATH}"
    return 0
fi

Unit_Report "${FILES_FILEPATH}"
DEFAULT_ATTRIBS="644 root root" # used only if we have a snapshot file but no system file and no attribs are listed

_line_num=0
while true
do

    # bail if we're past the end of the array
    [[ $_line_num == ${#FILES_ARRAY[@]} ]] && break

    # create hashed file array for comparison and recreation of new file
    _line="$(Swap_Out_Escaped_Spaces ${FILES_ARRAY[$_line_num]})"
    local _path="$(Swap_In_Escaped_Spaces $(echo -n $_line | awk '{print $1}'))"
    local _path_hash="$(Hash_Of "${_path}")"

    #FILEHASH_[${_path_hash}]="${_path}" # TODO: remove if unnecessary
    Add_To FILE_HASHLIST "${_path_hash}"
    FILE_[${_path_hash},PATH,SYST]="${_path}" # unnecessary?
    FILE_[${_path_hash},PATH,CONF]="$FILES_DIRPATH/${_path#/}"
    FILE_[${_path_hash},ATTR,CONF]="$(echo -n $_line | awk '{print $2,$3,$4}' | sed 's/^\s*\(.*\)\s*/\1/')"
    FILE_[${_path_hash},ATTR,SYST]="$(stat -c '%a %U %G' ${_path} 2>/dev/null | sed 's/^\s*\(.*\)\s*/\1/')"

    declare -ag FILES_MISS_BOTH FILES_MISS_SYST FILES_MISS_CONF
    declare -ag FILES_DIFF_CONT_ATTR FILES_DIFF_ATTR FILES_DIFF_CONT_ATTR
    declare -ag FILES_GOOD

    # FOLLOWING TESTS: ONE OR BOTH FILES MISSING
    if [[ ! -e "${FILE_[$_path_hash,PATH,SYST]}" && ! -e "${FILE_[$_path_hash,PATH,CONF]}" ]]; then Add_To FILES_MISS_BOTH "${_path}"
    elif [[ ! -e "${FILE_[$_path_hash,PATH,SYST]}" && -e "${FILE_[$_path_hash,PATH,CONF]}" ]]; then Add_To FILES_MISS_SYST "${_path}"
    elif [[ -e "${FILE_[$_path_hash,PATH,SYST]}" && ! -e "${FILE_[$_path_hash,PATH,CONF]}" ]]; then Add_To FILES_MISS_CONF "${_path}"

    # FOLLOWING TESTS: BOTH FILES PRESENT
    elif [[ "${FILE_[$_path_hash,ATTR,SYST]}" != "${FILE_[$_path_hash,ATTR,CONF]}" ]] \
    && $(! diff -q "${FILE_[$_path_hash,PATH,SYST]}" "${FILE_[$_path_hash,PATH,CONF]}" &>/dev/null); then Add_To FILES_DIFF_CONT_ATTR "${_path}"
    elif $(! diff -q "${FILE_[$_path_hash,PATH,SYST]}" "${FILE_[$_path_hash,PATH,CONF]}" &>/dev/null); then Add_To FILES_DIFF_CONT "${_path}"
    elif [[ "${FILE_[$_path_hash,ATTR,SYST]}" != "${FILE_[$_path_hash,ATTR,CONF]}" ]]; then Add_To FILES_DIFF_ATTR "${_path}"
    else Add_To FILES_GOOD "${_path}"
    fi

    let "_line_num+=1"

done

# GARBAGE COLLECTION (items in files directory but not in files list)

case $MODE in

CONFIG)
 
    CHANGE_MADE=false

    # MISSING FROM FILES DIRECTORY
    # -------------------------------------------------------------------------
    if [[ -n ${FILES_MISS_CONF[*]:-} ]]; then
        UI_Backup_Alert "\nCOPY MISSING FILES?\n${HR}
        \nThe following files haven't been saved to your ${SCRIPTNAME} config 
        yet. Please choose whether to copy each item to the config files 
        directory"

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]='FILES_MISS_CONF'

        [QUERY_STRING]='\n${_item}\nCopy file?'

        [ACTION_CMD]='File_Install_To_Config ${_hash}'
        [DEFAULT_CHOICE]='true'

        [EXECUTED_CMD]='if [[ -z ${FILE_[${_hash},ATTR,CONF]} ]] ; then
            Update_Attribs_In_Config "${_hash}";
            Add_To FILES_GOOD "${_item} (NEW COPY; ATTRIBUTES SET FROM SYSTEM)";
            Noforce_Alert "(${_item} copied; attributes set from system file)";
        elif [[ "${FILE_[${_hash},ATTR,CONF]}" == "${FILE_[${_hash},ATTR,SYST]}" ]]; then
            Update_Attribs_In_Config "${_hash}";
            Add_To FILES_GOOD "${_item} (NEW COPY; ATTRIBUTES MATCHED)";
            Noforce_Alert "(${_item} copied; attributes set from system file)";
        else
            Add_To FILES_DIFF_ATTR "${_item}";
            Noforce_Alert "(${_item} copied; attributes differ, will prompt for resolution in a moment)";
            FILE_[${_hash},NEWCOPY_REPORT]="NEW COPY; ";
        fi;
        Remove_From FILES_MISS_CONF "${_item}";
        CHANGE_MADE=true;'
        [SKIPPED_CMD]='Noforce_Alert "(${_item} skipped)"; Swap_In FILES_MISS_CONF "${_item}" "${_item} (NEW COPY SKIPPED)"'
        [FAILED_CMD]='Noforce_Alert "(${_item} copy failed!)"; Swap_In FILES_MISS_CONF "${_item}" "${_item} (NEW COPY FAILED)"'

        [FORCE_VALUE]='${FORCE}'

        ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # DIFFERING ATTRIBUTES
    # -------------------------------------------------------------------------
    if [[ -n ${FILES_DIFF_ATTR[*]:-} ]]; then
        UI_Backup_Alert "\nUPDATE ATTRIBUTES?\n${HR}
        \nThe following files differ in attributes between the system and 
        ${SCRIPTNAME} (contents match). Please choose whether to update each 
        item in your ${SCRIPTNAME} files directory"

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]='FILES_DIFF_ATTR'

        [QUERY_STRING]='\n${_item}\n(CURRENT IN ${SCRIPTNAME}:${FILE_[${_hash},ATTR,CONF]:-MISSING}) (NEW FROM SYSTEM:${FILE_[${_hash},ATTR,SYST]})\nUpdate attributes?'

        [ACTION_CMD]='Update_Attribs_In_Config "${_hash}"'
        [DEFAULT_CHOICE]='true'

        [EXECUTED_CMD]='Noforce_Alert "(${_item} updated attributes)";
        Add_To FILES_GOOD "${_item} (${FILE_[${_hash},NEWCOPY_REPORT]:-}UPDATED ATTRIBUTES)";
        Remove_From FILES_DIFF_ATTR "${_item}";
        CHANGE_MADE=true;'
        [SKIPPED_CMD]=' Noforce_Alert "(${_item} skipped)";
        Swap_In FILES_DIFF_ATTR "${_item}" "${_item} (UPDATE ATTRIBUTES SKIPPED)"'
        [FAILED_CMD]='  Noforce_Alert "(${_item} update attributes failed!)";
        Swap_In FILES_DIFF_ATTR "${_item}" "${_item} (UPDATE ATTRIBUTES FAILED!)"'

        [FORCE_VALUE]='${FORCE}'

        ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # DIFFERING CONTENT
    # -------------------------------------------------------------------------
    if [[ -n ${FILES_DIFF_CONT[*]:-} ]]; then
        UI_Backup_Alert "\nUPDATE FILE?\n${HR}
        The following files differ in content between ${SCRIPTNAME} and the 
        system (attributes match). Please choose whether to update each item in 
        your ${SCRIPTNAME} files directory"

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]='FILES_DIFF_CONT'

        [QUERY_STRING]='\n${_item}\nUpdate file?'

        [ACTION_CMD]='File_Install_To_Config "${_hash}"'
        [DEFAULT_CHOICE]='true'

        [EXECUTED_CMD]='Noforce_Alert "(${_item} updated)";
        Add_To FILES_GOOD "${_item} (UPDATED CONTENT)";
        Remove_From FILES_DIFF_CONT "${_item}";
        CHANGE_MADE=true;'
        [SKIPPED_CMD]=' Noforce_Alert "(${_item} skipped)";
        Swap_In FILES_DIFF_CONT "${_item}" "${_item} (UPDATE CONTENT SKIPPED)"'
        [FAILED_CMD]='  Noforce_Alert "(${_item} update failed!)";
        Swap_In FILES_DIFF_CONT "${_item}" "${_item} (UPDATE CONTENT FAILED!)"'

        [FORCE_VALUE]='${FORCE}'

        ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # DIFFERING CONTENT & ATTRIBUTES
    # -------------------------------------------------------------------------
    if [[ -n ${FILES_DIFF_CONT_ATTR[*]:-} ]]; then
        UI_Backup_Alert "\nUPDATE FILE & ATTRIBUTES?\n${HR}
        \nThe following files differ in content AND attributes between the 
        system and ${SCRIPTNAME}. Please choose whether to update each item in 
        your ${SCRIPTNAME} files directory"

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]='FILES_DIFF_CONT_ATTR'

        [QUERY_STRING]='\n${_item}\n(CURRENT IN ${SCRIPTNAME}:${FILE_[${_hash},ATTR,CONF]:-MISSING}) (NEW FROM SYSTEM:${FILE_[${_hash},ATTR,SYST]})\nUpdate file & attributes?'

        [ACTION_CMD]='File_Install_Config "${_hash}" && Update_Attribs_In_Config "${_hash}"'
        [DEFAULT_CHOICE]='true'

        [EXECUTED_CMD]='Noforce_Alert "(${_item} updated content & attributes)";
        Add_To FILES_GOOD "${_item} (UPDATED CONTENT & ATTRIBUTES)";
        Remove_From FILES_DIFF_CONT_ATTR "${_item}";
        CHANGE_MADE=true;'
        [SKIPPED_CMD]=' Noforce_Alert "(${_item} skipped)";
        Swap_In FILES_DIFF_CONT_ATTR "${_item}" "${_item} (UPDATE CONTENT & ATTRIBUTES SKIPPED)"'
        [FAILED_CMD]='  Noforce_Alert "(${_item} update content & attributes failed!)";
        Swap_In FILES_DIFF_CONT_ATTR "${_item}" "${_item} (UPDATE CONTENT & ATTRIBUTES FAILED!)"'

        [FORCE_VALUE]='${FORCE}'

        ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # WRITE FILE
    if Is_True ${CHANGE_MADE}
    then
        local _hash
        local _file_list=
        local _file_line=
        for _hash in ${FILE_HASHLIST[@]};
        do
            _file_line="${FILE_[$_hash,PATH,SYST]} ${FILE_[$_hash,ATTR,CONF]:-}";
            _file_list+="${_file_line% }\n";
        done
        echo -e "${_file_list}" | sort > "${TMPDIR}/${FILES_FILENAME}"
        install -CD --backup=${BACKUP_MODE} -S${BACKUP_SUFFIX} "${TMPDIR}/${FILES_FILENAME}" "${FILES_FILEPATH}" \
        && MODE_FINAL="SUCCESSFULLY UPDATED FILES LIST" \
        || MODE_FINAL="FAILED TO UPDATE FILES LIST!"
    else
        MODE_FINAL= #"NO CHANGES MADE; FILES LIST NOT UPDATED"
    fi

;;
SYSTEM)

    # MISSING FROM SYSTEM
    # -------------------------------------------------------------------------
    if [[ -n ${FILES_MISS_SYST[*]:-} ]]; then
        UI_Backup_Alert "\nCOPY MISSING FILES?\n${HR}
        \nThe following files are in your ${SCRIPTNAME} files
        directory but not yet installed on your system. Please choose whether 
        to install each item to the live system."

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]='FILES_MISS_SYST'

        [QUERY_STRING]='\n${_item}\nInstall file?'

        [ACTION_CMD]='File_Install_To_System "${_hash}"'
        [DEFAULT_CHOICE]='true'

        [EXECUTED_CMD]='Add_To FILES_GOOD "${_item} (NEW FILE INSTALLED TO SYSTEM)";
        Noforce_Alert "(${_item} copied)";
        Remove_From FILES_MISS_SYST "${_item}";
        CHANGE_MADE=true;'
        [SKIPPED_CMD]='Noforce_Alert "(${_item} skipped)"; Swap_In FILES_MISS_SYST "${_item}" "${_item} (INSTALL SYSTEM FILE SKIPPED)"'
        [FAILED_CMD]='Noforce_Alert "(${_item} copy failed!)"; Swap_In FILES_MISS_SYST "${_item}" "${_item} (INSTALL SYSTEM FILE FAILED)"'

        [FORCE_VALUE]='${FORCE}'

        ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # DIFFERING ATTRIBUTES
    # -------------------------------------------------------------------------
    if [[ -n ${FILES_DIFF_ATTR[*]:-} ]]; then
        UI_Backup_Alert "\nUPDATE ATTRIBUTES?\n${HR}
        \nThe following files differ in attributes between the system and 
        ${SCRIPTNAME} (contents match). Please choose whether to update each 
        file's attributes on the live system"

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]='FILES_DIFF_ATTR'

        [QUERY_STRING]='\n${_item}\n(CURRENT ON SYSTEM:${FILE_[${_hash},ATTR,SYST]}) (NEW FROM ${SCRIPTNAME}:${FILE_[${_hash},ATTR,CONF]:-MISSING}) \nUpdate attributes?'
        [ACTION_CMD]='Update_Attribs_In_System "${_hash}"'
        [DEFAULT_CHOICE]='true'

        [EXECUTED_CMD]='Noforce_Alert "(${_item} updated attributes)";
        Add_To FILES_GOOD "${_item} (${FILE_[${_hash},NEWCOPY_REPORT]:-}UPDATED SYSTEM FILE ATTRIBUTES)";
        Remove_From FILES_DIFF_ATTR "${_item}";
        CHANGE_MADE=true;'
        [SKIPPED_CMD]=' Noforce_Alert "(${_item} skipped)";
        Swap_In FILES_DIFF_ATTR "${_item}" "${_item} (UPDATE SYSTEM FILE ATTRIBUTES SKIPPED)"'
        [FAILED_CMD]='  Noforce_Alert "(${_item} update attributes failed!)";
        Swap_In FILES_DIFF_ATTR "${_item}" "${_item} (UPDATE SYSTEM FILE ATTRIBUTES FAILED!)"'

        [FORCE_VALUE]='${FORCE}'

        ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # DIFFERING CONTENT
    # -------------------------------------------------------------------------
    if [[ -n ${FILES_DIFF_CONT[*]:-} ]]; then
        UI_Backup_Alert "\nUPDATE FILE?\n${HR}
        The following files differ in content between ${SCRIPTNAME} and the 
        system (attributes match). Please choose whether to update each file's 
        contents in your live system."

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]='FILES_DIFF_CONT'

        [QUERY_STRING]='\n${_item}\nUpdate file?'

        [ACTION_CMD]='File_Install_To_System "${_hash}"'
        [DEFAULT_CHOICE]='true'

        [EXECUTED_CMD]='Noforce_Alert "(${_item} updated)";
        Add_To FILES_GOOD "${_item} (UPDATED SYSTEM FILE CONTENT)";
        Remove_From FILES_DIFF_CONT "${_item}";
        CHANGE_MADE=true;'
        [SKIPPED_CMD]=' Noforce_Alert "(${_item} skipped)";
        Swap_In FILES_DIFF_CONT "${_item}" "${_item} (UPDATE SYSTEM FILE CONTENT SKIPPED)"'
        [FAILED_CMD]='  Noforce_Alert "(${_item} update failed!)";
        Swap_In FILES_DIFF_CONT "${_item}" "${_item} (UPDATE SYSTEM FILE CONTENT FAILED!)"'

        [FORCE_VALUE]='${FORCE}'

        ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # DIFFERING CONTENT & ATTRIBUTES
    # -------------------------------------------------------------------------
    if [[ -n ${FILES_DIFF_CONT_ATTR[*]:-} ]]; then
        UI_Backup_Alert "\nUPDATE FILE & ATTRIBUTES?\n${HR}
        \nThe following files differ in content AND attributes between the 
        system and ${SCRIPTNAME}. Please choose whether to update each file in 
        your live system."

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]='FILES_DIFF_CONT_ATTR'

        [QUERY_STRING]='\n${_item}\n(CURRENT IN ${SCRIPTNAME}:${FILE_[${_hash},ATTR,CONF]:-MISSING}) (NEW FROM SYSTEM:${FILE_[${_hash},ATTR,SYST]})\nUpdate file & attributes?'

        [ACTION_CMD]='File_Install_To_System "${_hash}" && Update_Attribs_In_System "${_hash}"'
        [DEFAULT_CHOICE]='true'

        [EXECUTED_CMD]='Noforce_Alert "(${_item} updated content & attributes)";
        Add_To FILES_GOOD "${_item} (UPDATED SYSTEM FILE CONTENT & ATTRIBUTES)";
        Remove_From FILES_DIFF_CONT_ATTR "${_item}";
        CHANGE_MADE=true;'
        [SKIPPED_CMD]=' Noforce_Alert "(${_item} skipped)";
        Swap_In FILES_DIFF_CONT_ATTR "${_item}" "${_item} (UPDATE SYSTEM FILE CONTENT & ATTRIBUTES SKIPPED)"'
        [FAILED_CMD]='  Noforce_Alert "(${_item} update content & attributes failed!)";
        Swap_In FILES_DIFF_CONT_ATTR "${_item}" "${_item} (UPDATE SYSTEM FILE CONTENT & ATTRIBUTES FAILED!)"'

        [FORCE_VALUE]='${FORCE}'

        ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

;;
esac

Progress_Report FILES_GOOD "MATCHES ON SYSTEM/CONFIG"
Progress_Report FILES_MISS_SYST "MISSING ON SYSTEM (PRESENT IN $(Upper_Case ${SCRIPTNAME}) CONFIG)"
Progress_Report FILES_MISS_CONF "MISSING ON $(Upper_Case ${SCRIPTNAME}) CONFIG (PRESENT ON SYSTEM)"
Progress_Report FILES_MISS_BOTH "MISSING ON BOTH SYSTEM AND $(Upper_Case ${SCRIPTNAME}) CONFIG"
Progress_Report FILES_DIFF_ATTR "ATTRIBUTES DIFFER (OR MISSING)"
Progress_Report FILES_DIFF_CONT "CONTENTS DIFFER"
Progress_Report FILES_DIFF_CONT_ATTR "ATTRIBS/CONTENTS DIFFER"
Progress_Report FILES_GARBAGE "GARBAGE COLLECTION (ITEMS IN ${SCRIPTNAME} FILES DIRECTORY, NOT IN FILES LIST)"
[[ -z ${MODE_FINAL:-} ]] || Unit_Report "\n${MODE_FINAL}"
}

# ==============================================================================
# REPORT
# ==============================================================================

UNIT_Report ()
{
# trap was previously ReportResults plus CleanUpEnvironment; if we're 
# here and have a critical failure then we must of course reassign our 
# trap to CleanUpEnvironment (which would have been called after 
# ReportResults)
trap 'UNIT_Clean_Up' INT TERM EXIT
Is_True ${DEBUG} && return 0
if [[ -n ${REPORT_SEQUENCE_[@]:-} ]]
then
    for _report_category in "${REPORT_SEQUENCE_[@]:-}"
    do
        if [[ -n ${REPORT_[${_report_category}]} ]]
        then
            local _report_title="$(Upper_Case $_report_category | tr "_" " ")"
            UI_Passive_Alert "\n${_report_title}\n${HR2}"
            UI_Passive_Alert "${REPORT_[${_report_category}]}"
        fi
    done
fi

#each sequence unit should be creating a report in a standard format
#and adding to a global report sequence variable
}

# ==============================================================================
# CLEANUP / TRAP
# ==============================================================================

UNIT_Clean_Up ()
{
trap - INT TERM EXIT
#remove temp dir
for cleanup_item in "${CLEANUP[@]}"; do eval "$cleanup_item"; done
}

TRAP_Alert () { echo -e "\nEARLY TERMINATION: Running Cleanup...\n"; }

# ==============================================================================
# MAIN EXECUTION OF UNIT_SEQUENCE
# ==============================================================================

for unit in $UNIT_SEQUENCE; do eval UNIT_$unit; done; unset unit
