#!/bin/bash

TestFunc ()
{
    :
}

# ----------------------------------------------------------------------
# REQUIRES
# ----------------------------------------------------------------------
# requires:
# wget
# packer (can install automatically)

# ----------------------------------------------------------------------
# STYLE GUIDE
# ----------------------------------------------------------------------
# avoid changing global state inside functions; prefer to return echo'd
#        values or set indirect variable names (not always possible)
# Global_Functions_Camel_Case_No_Leading_Underscore
# _Local_Functions_Camel_Case_o_Leading_Underscore
# GLOBALS in all caps
# globals that used to retrieve results from functions (pseudo local)
#        all lower case; should be unset after use this temporary use
# _local variables, lowercase leading underscore
# ASSOCIATIVE_ARRAYS_[NOTE_FINAL_UNDERSCORE]
# bracket all ${variables} for consistency

# ----------------------------------------------------------------------
# ENFORCE STYLES
# ----------------------------------------------------------------------
# scan for _locals outside of a function
# scan for _Local_Functions outside of a function
# scan for temp_globals that aren't unset
# scan for Camel_Case in function declarations

# ----------------------------------------------------------------------
# SCRIPT EXECUTION SETTINGS
# ----------------------------------------------------------------------

SCRIPTNAME="$(basename $0)"
DEBUG=${DEBUG:-}
set -o nounset # -u : disallow unset variable use
set -o errexit # -e : exit on any trivial error
[[ -z $DEBUG ]] || set -o verbose # -v : talkative bash DEBUG

# ----------------------------------------------------------------------
# SCRIPT DEFAULTS
# ----------------------------------------------------------------------

LIBS_DIRPATH="/usr/share/${SCRIPTNAME}/lib"
LIBS_DIRPATH="$(dirname $0)/lib" # TODO: remove this
CMDLINE_OPTIONS="${@}" # global so we can use in functions easily
BACKUP_SUFFIX=".${SCRIPTNAME}" # cf man install
DEFAULT_BACKUP_MODE=simple # cf man install
PACKAGES_FILENAME="packages"
AUR_FILENAME="aur"
OVERLAY_FILENAME="overlay"
OVERLAY_DIRNAME="${OVERLAY_FILENAME}.d"

# ----------------------------------------------------------------------
# DYNAMIC ASSOCIATIVE ARRAYS
# ----------------------------------------------------------------------
# This allows associative arrays to be used like normal bash variables without 
# explicitly declaring them if the are suffixed by an underscore:
# I_AM_AN_ASSOCIATIVE_ARRAY_[INDEED]
# Note: evaluated variable names ( eval I_MAY_${BE_AN_ASSOC}_[ARRAY] ) will not 
# be detected by this unless referenced somewhere else in its full form.
# TODO: only the first assoc array on a line will be declared. Currently the 
# variable name can only be prefixed by non-word characters
# NOTE: "line: xxx: NAME: unbound variable errors are likely because an 
# associative array isn't being detected (usually forgot to use a trailing 
# underscore).
# nb: the sed is a bit ugly but it's compensating for sed's natural greediness

for filename in $0 $LIBS_DIRPATH/*; do
for assoc_array in $(egrep '^[^#]*_(\[.*\])?[+=]' $filename \
    | sed 's/\W*\(\W*\)\(\w\+_\)[\[\=\].*/\1-----\2/' \
    | sed 's/.*-----\(.*\)/\1/' | sort -u)
    do
        eval "declare -A $assoc_array";
    done;
done; unset filename

# ----------------------------------------------------------------------
# LIBS
# ----------------------------------------------------------------------

for filename in $LIBS_DIRPATH/* ; do source $filename; done; unset filename

# ----------------------------------------------------------------------
# TEST FUNCTION
# ----------------------------------------------------------------------

TestFunc

# ----------------------------------------------------------------------
# USER DEFAULTS
# ----------------------------------------------------------------------
# Don't change these here. Set in your shell's environment variables.

# Config directory. Override this in your environment with ${SCRIPTNAME}_DIR
CONFIG_DIRPATH_ENVVARNAME="$(Upper_Case $SCRIPTNAME)_CONFIG"
eval CONFIG_DIRPATH_DEFAULT="\${!$CONFIG_DIRPATH_ENVVARNAME:-\${XDG_CONFIG_HOME}/\${SCRIPTNAME}/\${HOSTNAME}}"

# AUR helper. Override with in your environment with AUR_HELPER
# must support basic pacman command line options (-S, -Q, etc.)
AUR_HELPER=${AUR_HELPER:-packer}

# ----------------------------------------------------------------------
# COMMAND LINE OPTIONS, RUNTIME OPTION REPORT VALUES & HELP
# ----------------------------------------------------------------------

OPT_SYSTEM_UPDATE_=(
[FLAG]='S'
[STATE]='false'
[STATE_SET]='true'
[CONFLICTS]='CONFIG_UPDATE'
[ALERT]='System update OFF; No system files will be updated.'
[ALERT_SET]='System update ON; Live system files will be overwritten.'
[USAGE]="Update LIVE system files/packages from ${SCRIPTNAME} config."
[PRERUN_CONDITIONALS]='FORCE FULL_FORCE'
[PRERUN]='SYSTEM UPDATE MODE will PROMPT for the following:

* install packages listed in ${SCRIPTNAME} config
* uninstall packages not in ${SCRIPTNAME} config
* install new group packages
* remove old group packages
* install ${SCRIPTNAME} overlay files to system'
[PRERUN_FORCE]='SYSTEM UPDATE (FORCE) MODE will AUTOMATICALLY execute:

* install packages listed in ${SCRIPTNAME} config
* uninstall packages not in ${SCRIPTNAME} config
* install new group packages
* remove old group packages
* install ${SCRIPTNAME} overlay files to system'
[PRERUN_FULL_FORCE]=''
)
OPT_CONFIG_UPDATE_=(
[FLAG]='U'
[STATE]='false'
[STATE_SET]='true'
[ALERT]='${SCRIPTNAME} config update OFF; ${SCRIPTNAME} files will not be updated.'
[ALERT_SET]='${SCRIPTNAME} config update ON; Updated files saved to ${SCRIPTNAME} config.'
[USAGE]="Update files in ${SCRIPTNAME} config directory."
[PRERUN_CONDITIONALS]='FORCE FULL_FORCE'
[PRERUN]='$(Upper_Case ${SCRIPTNAME}) CONFIG UPDATE MODE will PROMPT for the following:

* Packages in the ${SCRIPTNAME} config, but not installed on the system, will
  be optionally (prompted) removed from the ${SCRIPTNAME} packages/aur lists.

* Currently installed packages not yet included in the ${SCRIPTNAME} config
  will be optionally (prompted) added to the ${SCRIPTNAME} packages (and aur) list.

* Overlay files listed in the ${SCRIPTNAME} overlay list will optionally 
  (prompt) be updated from the current version on the live system and saved in the overlay directory ${OVERLAY_DIRPATH}.'
[PRERUN_FORCE]='$(Upper_Case ${SCRIPTNAME}) UPDATE (FORCE) MODE will AUTOMATICALLY execute:

* Packages in the ${SCRIPTNAME} config, but not installed on the system, will
  be automatically (no prompt) removed from the ${SCRIPTNAME} packages/aur lists.

* Currently installed packages not yet included in the ${SCRIPTNAME} config
  will be automatically (no prompt) added to the ${SCRIPTNAME} packages (and aur) list.

* Overlay files listed in the ${SCRIPTNAME} overlay list will automatically 
  (no prompt) be updated from the current version on the live system and saved in the overlay directory ${OVERLAY_DIRPATH}'
[PRERUN_FULL_FORCE]=''
)
OPT_FORCE_=(
[FLAG]='f'
[STATE]='false'
[STATE_SET]='true'
[ALERT]='Force mode OFF; Prompt before file write operations.'
[ALERT_SET]='Force mode ON; No prompts presented (CAUTION).'
[USAGE]='Force all write operations; no prompts will be given.'
[PRERUN]=''
)
OPT_FULL_FORCE_=(
[FLAG]='F'
[STATE]='false'
[STATE_SET]='true'
[ALERT]='Full Force mode OFF; No automatic uninstalls.'
[ALERT_SET]='Full Force mode ON; Automatic uninstalls.'
[USAGE]='DANGER: Force mode with automatic execution, NO-INITIAL PROMPT.'
)
OPT_GROUP_CURRENCY_CHECK_=(
[FLAG]='g'
[STATE]='true'
[STATE_SET]='false'
[ALERT]='Suppress group check OFF; Groups will be checked for currency.'
[ALERT_SET]='Suppress group check ON; Groups will not be checked for currency.'
[USAGE]='Suppress group currency check; Skip checking current group packages.'
)
OPT_OVERLAY_DIFF_DISPLAY_=(
[FLAG]='d'
[STATE]='false'
[STATE_SET]='true'
[ALERT]='Overlay file diff OFF; No file diff report will be displayed.'
[ALERT_SET]='Overlay file diff ON; File diff report will be displayed.'
[USAGE]='Overlay files will be diffed with system files and result displayed.'
)
OPT_GIT_UPDATE_=(
[FLAG]='c'
[STATE]='false'
[STATE_SET]='true'
[ALERT]='Git commit update OFF; No git commit/push after config update.'
[ALERT_SET]='Git commit update ON; Git commit/push after config update.'
[USAGE]="Git commit and push ${SCRIPTNAME} config directory if it is a repository."
)
OPT_PACMAN_UPDATE_=(
[FLAG]='y'
[STATE]='false'
[STATE_SET]='true'
[ALERT]='Pacman update OFF; Package list will not be refreshed.'
[ALERT_SET]='Pacman update ON; Package list will be downloaded.'
[USAGE]='Update pacman package master list (pacman -Sy).'
)
OPT_CONFIG_DIRPATH_=(
[FLAG]='p:'
[STATE]="${CONFIG_DIRPATH_DEFAULT}"
[STATE_SET]=''
[ALERT]="Default ${SCRIPTNAME}: ${CONFIG_DIRPATH_DEFAULT}."
[ALERT_SET]='Custom ${SCRIPTNAME}: ${CONFIG_DIRPATH}.'
[USAGE]="Specify full path to a custom ${SCRIPTNAME} config directory."
)
OPT_SIMPLE_REPORT_=(
[FLAG]='R'
[STATE]='false'
[STATE_SET]='true'
[CONFLICTS]='CONFIG_UPDATE SYSTEM_UPDATE'
[ALERT]='Simple Report OFF; Run with this ON to report with no system changes.'
[ALERT_SET]='Simple Report ON; Report shown; no changes made to system.'
[USAGE]="SAFELY Reports system and ${SCRIPTNAME} config state; no changes made."
[PRERUN_CONDITIONALS]='FORCE FULL_FORCE'
[PRERUN]='SIMPLE REPORT MODE:
SAFELY Reports system and ${SCRIPTNAME} config state; no will be changes made.'
[PRERUN_FORCE]=''
[PRERUN_FULL_FORCE]=''
)
OPT_BACKUP_MODE_=(
[FLAG]='b'
[STATE]="${DEFAULT_BACKUP_MODE}"
[STATE_SET]='none'
[ALERT]='Backups ON; Files will be saved in place with backup suffix.'
[ALERT_SET]='Backups OFF; Files will be overwritten.'
[USAGE]='Turn off backups when copying new files to an existing path.'
[PRERUN_CONDITIONALS]='SYSTEM_UPDATE CONFIG_UPDATE'
[PRERUN_SYSTEM_UPDATE]='WARNING: SYSTEM FILES WILL BE OVERWRITTEN WITHOUT BACKUP.'
[PRERUN_CONFIG_UPDATE]='WARNING: $(Upper_Case ${SCRIPTNAME}) CONFIG FILES WILL BE OVERWRITTEN WITHOUT BACKUP.'
)
OPT_HELP_=(
[FLAG]='h'
[STATE]='false'
[STATE_SET]='true'
[ALERT]='Display option and usage summary.'
[USAGE]='${OPT_HELP_[ALERT]}'
)
USAGE_CONFIG_STATE="\nSTATE SUMMARY:\n${HR}
DEFAULT $(Upper_Case ${SCRIPTNAME}) CONFIG PATH: ${CONFIG_DIRPATH_DEFAULT} 
Change with -${OPT_CONFIG_DIRPATH_[FLAG]} <custompath> or set ${CONFIG_DIRPATH_ENVVARNAME} in your environment.

CURRENT AUR HELPER: ${AUR_HELPER}
Change with AUR_HELPER in your environment."
USAGE_SUMMARY="\nUSAGE SUMMARY:\n${HR}
${SCRIPTNAME} -${OPT_SIMPLE_REPORT_[FLAG]}\tShow a report; no changes made to system (try this first!)
${SCRIPTNAME} -${OPT_CONFIG_UPDATE_[FLAG]}\tCreate a new or update existing ${SCRIPTNAME} config
${SCRIPTNAME} -${OPT_SYSTEM_UPDATE_[FLAG]}\tUpdate live system to match current ${SCRIPTNAME} config

Adding -${OPT_FORCE_[FLAG]} will skip normal prompts prior to write operations. 
Adding -${OPT_FULL_FORCE_[FLAG]} will skip the initial prompt as well as all subsequent prompts.

FIRST RUN / AUTOMATIC UPDATE:\n${HR}
${SCRIPTNAME} -${OPT_CONFIG_UPDATE_[FLAG]}${OPT_FORCE_[FLAG]}\tAutomatically create a ${SCRIPTNAME} config from system state.

See options summary above for other features or consult the ${SCRIPTNAME} man page using the command: man ${SCRIPTNAME}
"

# ----------------------------------------------------------------------
# EXECUTION SEQUENCE
# ----------------------------------------------------------------------

UNIT_SEQUENCE="
Prepare_Environment
Initialize_Options
Config
Groups
Packages
Overlay
Report
Clean_Up
"

# ----------------------------------------------------------------------
# EXECUTION UNITS
# ----------------------------------------------------------------------

TRAP_Alert ()
{
    # echo -e "\nEARLY TERMINATION: Running Cleanup...\n"
    :
}

UNIT_Prepare_Environment ()
{
trap 'TRAP_Alert; UNIT_Report; UNIT_Clean_Up' INT TERM EXIT
TMPDIR="$(mktemp -d --tmpdir $SCRIPTNAME.XXX)"; CLEANUP+=('rm -rf $TMPDIR')
Install_Package_From_AUR "$AUR_HELPER"
}

UNIT_Initialize_Options ()
{
# initialize options from OPT_ arrays
Options_Initialize || Fail_Critically "Error initializing options."

# final path set based on options
PACKAGES_FILEPATH="${CONFIG_DIRPATH}/${PACKAGES_FILENAME}"
AUR_FILEPATH="${CONFIG_DIRPATH}/${AUR_FILENAME}"
OVERLAY_FILEPATH="${CONFIG_DIRPATH}/${OVERLAY_FILENAME}"
OVERLAY_DIRPATH="${CONFIG_DIRPATH}/${OVERLAY_DIRNAME}"

# set force if full force
Is_True ${FULL_FORCE} && FORCE=true

# set execution mode
#if ! Is_True ${SYSTEM_UPDATE:-} && ! Is_True ${CONFIG_UPDATE:-}
if Is_True ${SIMPLE_REPORT:-}
then MODE=REPORT
elif Is_True ${CONFIG_UPDATE:-}
then MODE=CONFIG
elif Is_True ${SYSTEM_UPDATE:-}
then MODE=SYSTEM
else
    Usage; exit 0
fi

# options summary and prerun alert
local _option_summary="$(Options_Summary)"
local _option_prerun="$(Options_Prerun)"
[[ -z ${_option_summary:-} ]] || UI_Passive_Alert "\n$SCRIPTNAME\n${HR}\n${_option_summary}"
[[ -z ${_option_prerun:-} ]] || Query "\n${_option_prerun}\n\nProceed?"
}

UNIT_Config ()
{
# locate/make config directory if in update config mode, otherwise warn 
# user and exit
if [[ ! -d "${CONFIG_DIRPATH}" ]]
then
    if Is_True ${SYSTEM_UPDATE}
    then
        local _alert=
        if [[ "${CONFIG_DIRPATH}" == "${CONFIG_DIRPATH_DEFAULT}" ]]
        then
        _alert+="No config directory found at default path ${CONFIG_DIRPATH}.
        Please run ${SCRIPTNAME} again in config update mode (command line 
        flag: -${OPT_CONFIG_UPDATE_[FLAG]%:}) to automatically create 
        a ${SCRIPTNAME} config directory at this default location. Alternately,
        locate an existing ${SCRIPTNAME} config directory (using the  
        -${OPT_CONFIG_DIRPATH_[FLAG]%:} <custompath> command line option)."
        else
        _alert+="No config directory found at custom path ${CONFIG_DIRPATH}.
        Please run ${SCRIPTNAME} again in config update mode (command line 
        flag: -${OPT_CONFIG_UPDATE_[FLAG]%:}) to automatically create 
        a ${SCRIPTNAME} config directory at this custom location.
        Alternately, run again without the
        -${OPT_CONFIG_DIRPATH_[FLAG]%:} <custompath> option to 
        attempt to use the default ${SCRIPTNAME} config directory 
        (${CONFIG_DIRPATH_DEFAULT})."
        fi
        UI_Passive_Warning "$(echo -e ${_alert})"
        exit 0
    else
        mkdir -p ${CONFIG_DIRPATH}
    fi
fi
local _message="\nSourcing from ${SCRIPTNAME} config directory: ${CONFIG_DIRPATH}"
UI_Passive_Alert "$_message"
# if [[ "${MODE}" != "REPORT" ]] && ! Is_True ${FORCE}
# then
#     UI_Passive_Alert "$_message"
# fi
# Unit_Report "$_message"

PACKAGES_FILE="$(Read_File_Drop_Comments ${PACKAGES_FILEPATH} | Normalize_To_List)"
AUR_FILE="$(Read_File_Drop_Comments ${AUR_FILEPATH} | Normalize_To_List)"

}

UNIT_Groups ()
{

# DETECT GROUPS
# ----------------------------------------------------------------------
GROUPS_POTENTIAL=$(pacman -Qg | awk '{print $1}' | sort -u)
#UI_Incremental_Alert "\nDetecting installed groups... "
UI_Incremental_Alert "\nInitializing..."
local _group
for _group in ${GROUPS_POTENTIAL}
do
    # get percentage of group already installed
    # sort -u required (via Normalize_To_List) as there can be duplicate package 
    # reporting if testing repos are live, for instance
    GROUP_PACKAGES_LOCAL_[${_group}]="$(pacman -Qgq $_group)"
    GROUP_PACKAGES_REPO_[${_group}]="$(pacman -Sgq $_group)"
    local _group_count_local=$(echo ${GROUP_PACKAGES_LOCAL_[${_group}]} \
        | Normalize_To_List | wc -l)
    local _group_count_repo=$(echo ${GROUP_PACKAGES_REPO_[${_group}]} \
        | Normalize_To_List | wc -l)
    local _threshold=12
    local _score=$(echo $((($_group_count_repo*10)/$_group_count_local)))
    if [[ $_score -le $_threshold ]]
    then
        GROUPS_DETECTED+="$_group "
        #UI_Incremental_Alert "$_group "
        UI_Incremental_Alert ".."
    fi
done
#UI_Incremental_Alert # finishes the incremental alert line
UI_Passive_Alert " Done\n"
Unit_Report "INSTALLED GROUPS (DETECTED>80% MEMBER PACKAGE 
INSTALL):\n${GROUPS_DETECTED}"

# CHECK GROUP FOR NEW/REMOVED PACKAGES
# ----------------------------------------------------------------------

if Is_True ${GROUP_CURRENCY_CHECK}; then

# scan and build list of missing/removed
local _group
for _group in ${GROUPS_DETECTED}
do
    local _missing="$(Set_Op_Difference "${GROUP_PACKAGES_REPO_[$_group]}" "${GROUP_PACKAGES_LOCAL_[$_group]}")"
    if [[ -n ${_missing:-} ]]
    then
        GROUP_PACKAGES_MISSING_IN_GROUP_[${_group}]="${_missing%% *}"
    fi
    local _removed="$(Set_Op_Difference "${GROUP_PACKAGES_LOCAL_[${_group}]}" "${GROUP_PACKAGES_REPO_[${_group}]}")"
    if [[ -n ${_removed:-} ]]
    then
        GROUP_PACKAGES_REMOVED_FROM_GROUP_[${_group}]="${_removed%% *}"
    fi
done

local _runagain_alert="Run again in system update mode (non 
-${OPT_FORCE_[FLAG]} forced mode) to be presented a prompt for installation of 
these, or install manually."

local _skip_alert="Run ${SCRIPTNAME} with the 
-${OPT_GROUP_CURRENCY_CHECK_[FLAG]} command line option to skip this group 
package currency check."

if [[ -n "${GROUP_PACKAGES_MISSING_IN_GROUP_[*]:-}" ]]
then
    # there are some missing packages

    local _alert_intro="MISSING GROUP PACKAGES
    \nPackages currently included in group lists in repository but which are 
    missing from locally installed groups (for groups that have been fully 
    installed). Possibly indicates that groups have been updated in the 
    official repositories."

    if ! Is_True ${FORCE} && [[ "${MODE}" == "SYSTEM" ]]
    then
        # SYSTEM, NON FORCE MODE
            UI_Passive_Alert "${_alert_intro}"
            [[ -n ${_skip_alert} ]] && UI_Passive_Alert "${_skip_alert}\n"
            _skip_alert=
    else
        # REPORT, CONFIG-UPDATE, OR SYSTEM-FORCE (don't auto install group pkgs?)
            Unit_Report "\n${_alert_intro}\n"
            [[ -n ${_runagain_alert} ]] && Unit_Report "${_runagain_alert}"
            [[ -n ${_skip_alert} ]] && Unit_Report "${_skip_alert}"
            [[ -n "${_skip_alert}${_runagain_alert}" ]] && Unit_Report ""
            _skip_alert=
            _runagain_alert=
    fi

    local _group
    for _group in ${!GROUP_PACKAGES_MISSING_IN_GROUP_[*]}; do
    if [[ -n "${GROUP_PACKAGES_MISSING_IN_GROUP_[$_group]}" ]]; then
    if ! Is_True ${FORCE} && [[ "${MODE}" == "SYSTEM" ]]; then
        UI_Passive_Alert "MISSING from group \"${_group}\":"

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]=''
        [LIST_VALUE]="${GROUP_PACKAGES_MISSING_IN_GROUP_[$_group]}"
        [QUERY_STRING]='Install ${_item}?'
        [ACTION_CMD]='Install_Package "${_item}"'
        [EXECUTED_CMD]=''
        [SKIPPED_CMD]=''
        [FAILED_CMD]=''
        [EXECUTED_LIST_CMD]='Unit_Report "MISSING from group \"${_group}\", INSTALLED: ${_executed_list}"'
        [SKIPPED_LIST_CMD]='Unit_Report "MISSING from group \"${_group}\", INSTALL SKIPPED: ${_skipped_list}"'
        [FAILED_LIST_CMD]='Unit_Report "MISSING from group \"${_group}\", INSTALL FAILED: ${_failed_list}"'
        [EXECUTED_RTN_NAME]=''
        [SKIPPED_RTN_NAME]=''
        [FAILED_RTN_NAME]=''
        [FORCE_VALUE]='${FORCE}'
        [DEFAULT_CHOICE]='false'
        #[DEFAULT_CHOICE]='${FULL_FORCE}'
        ); Ask_Auto_Action ASK_AUTO_SOURCE_
    else
        # not in non-force system update mode
        Unit_Report "MISSING from group \"${_group}\": ${GROUP_PACKAGES_MISSING_IN_GROUP_[$_group]}"
    fi; fi; done

    # regen packages list in case of changes to group packages
    # TODO: could check if changes were made, but this is a low cost procedure
    local _group
    for _group in ${GROUPS_DETECTED}
    do
        GROUP_PACKAGES_LOCAL_[${_group}]="$(pacman -Qgq $_group)"
        GROUP_PACKAGES_REPO_[${_group}]="$(pacman -Sgq $_group)"
    done

fi # end of test for any missing group packages

if [[ -n "${GROUP_PACKAGES_REMOVED_FROM_GROUP_[*]:-}" ]]
then
    # there are some removed packages

    local _alert_intro="REMOVED GROUP PACKAGES
    \nPackages that are currently installed via group package installation but 
    which have since been removed from group list in repository (for groups that 
    have been fully installed). Possibly indicates that groups have been updated in 
    the official repositories."

    if ! Is_True ${FORCE} && [[ "${MODE}" == "SYSTEM" ]]
    then
        # SYSTEM, NON FORCE MODE
        UI_Passive_Alert "${_alert_intro}"
        [[ -n ${_skip_alert} ]] && UI_Passive_Alert "${_skip_alert}\n"
        _skip_alert=
    else
        # REPORT, CONFIG-UPDATE, OR SYSTEM-FORCE (don't auto install group pkgs?)
        Unit_Report "${_alert_intro}"
        [[ -n ${_runagain_alert} ]] && Unit_Report "${_runagain_alert}"
        [[ -n ${_skip_alert} ]] && Unit_Report "${_skip_alert}"
        _skip_alert=
        _runagain_alert=
    fi
    local _group
    for _group in ${!GROUP_PACKAGES_REMOVED_FROM_GROUP_[*]}; do
    if [[ -n "${GROUP_PACKAGES_REMOVED_FROM_GROUP_[$_group]}" ]]; then
    if ! Is_True ${FORCE} && [[ "${MODE}" == "SYSTEM" ]]; then
        # SYSTEM, NON FORCE MODE
        UI_Passive_Alert "REMOVED from group \"${_group}\":"

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]=''
        [LIST_VALUE]="${GROUP_PACKAGES_REMOVED_FROM_GROUP_[$_group]}"
        [QUERY_STRING]='Install ${_item}'
        [ACTION_CMD]='Uninstall_Package "${_item}?'
        [EXECUTED_CMD]=''
        [SKIPPED_CMD]=''
        [FAILED_CMD]=''
        [EXECUTED_LIST_CMD]='Unit_Report "REMOVED from repo group \"${_group}\", UNINSTALLED: ${_executed_list}"'
        [SKIPPED_LIST_CMD]='Unit_Report "REMOVED from repo group \"${_group}\", UNINSTALL SKIPPED: ${_skipped_list}"'
        [FAILED_LIST_CMD]='Unit_Report "REMOVED from repo group \"${_group}\", UNINSTALL FAILED: ${_failed_list}"'
        [EXECUTED_RTN_NAME]=''
        [SKIPPED_RTN_NAME]=''
        [FAILED_RTN_NAME]=''
        [FORCE_VALUE]='${FORCE}'
        [DEFAULT_CHOICE]='false'
        #[DEFAULT_CHOICE]='${FULL_FORCE}'
        ); Ask_Auto_Action ASK_AUTO_SOURCE_

    else
        Unit_Report "REMOVED from group \"${_group}\": ${GROUP_PACKAGES_REMOVED_FROM_GROUP_[$_group]}\n"
    fi; fi; done
fi # end of test for any removed group packages
fi # end of group currency check test
}

UNIT_Packages ()
{
# PACKAGE STATE
# ----------------------------------------------------------------------
Unit_Report "PACKAGES LIST (${PACKAGES_FILEPATH})"
Unit_Report "AUR LIST (${AUR_FILEPATH})"

#UI_Passive_Alert "Getting list of explicitly installed packages"

# TODO: deal with timeline of updating the group packages
#PACKAGES_LOCAL_ALLGROUPS="$(pacman -Qgq | Normalize_To_List)"

local _packages_groups="$(echo "${GROUP_PACKAGES_LOCAL_[*]}" | Normalize_To_List)"
local _packages_explicit="$(pacman -Qeq)"
local _packages_manual="$(pacman -Qmq)"
local _packages_repo="$(Set_Op_Difference "${_packages_explicit}" "${_packages_manual}")"
local _packages_noaur="$(Set_Op_Difference "${_packages_explicit}" "${_packages_manual}")"

PACKAGES_LIVE="$(Set_Op_Difference "${_packages_repo}" "${_packages_groups}")"
AUR_LIVE="$(Set_Op_Intersection "${_packages_explicit}" "${_packages_manual}")"
PACKAGES_MISSING_IN_LIVE="$(Set_Op_Difference "${PACKAGES_FILE}" "${PACKAGES_LIVE}")"
PACKAGES_MISSING_IN_FILE="$(Set_Op_Difference "${PACKAGES_LIVE}" "${PACKAGES_FILE}")"
AUR_MISSING_IN_LIVE="$(Set_Op_Difference "${AUR_FILE}" "${AUR_LIVE}")"
AUR_MISSING_IN_FILE="$(Set_Op_Difference "${AUR_LIVE}" "${AUR_FILE}")"

_report_packages_live="\nOFFICIAL PACKAGES (excl. dependencies, no installed group packages):\n$(echo ${PACKAGES_LIVE:-NONE})"
_report_aur_live="\nAUR PACKAGES (excl. dependencies):\n$(echo ${AUR_LIVE:-NONE})"
Unit_Report "$(echo ${_report_packages_live})"
Unit_Report "$(echo ${_report_aur_live})"

case $MODE in
REPORT) # Unit_Report all
    [[ -z ${PACKAGES_MISSING_IN_LIVE:-} ]] \
    || _report_packages_missingin_live="\n$(Upper_Case ${SCRIPTNAME}) CONFIG OFFICIAL PACKAGES NOT INSTALLED ON LIVE SYSTEM: \n$(echo ${PACKAGES_MISSING_IN_LIVE})"
    [[ -z ${AUR_MISSING_IN_LIVE:-} ]] \
    || _report_aur_missingin_live="\n$(Upper_Case ${SCRIPTNAME}) CONFIG AUR PACKAGES NOT INSTALLED ON LIVE SYSTEM: \n${AUR_MISSING_IN_LIVE})"
    [[ -z ${PACKAGES_MISSING_IN_FILE:-} ]] \
    || _report_packages_missinging_file="\nOFFICIAL PACKAGES INSTALLED ON SYSTEM BUT NOT IN $(Upper_Case ${SCRIPTNAME}) CONFIG: \n$(echo ${PACKAGES_MISSING_IN_FILE})"
    [[ -z ${AUR_MISSING_IN_FILE:-} ]] \
    || _report_aur_missingin_file="\nAUR PACKAGES INSTALLED ON SYSTEM BUT NOT IN $(Upper_Case ${SCRIPTNAME}) CONFIG: \n$(echo ${AUR_MISSING_IN_FILE})"
    ;;
CONFIG) # Condition add all, conditional remove all

    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]=''
    [LIST_VALUE]="${PACKAGES_MISSING_IN_FILE}"
    [QUERY_STRING]='${_item} on system but not in ${SCRIPTNAME} config. Add to config packages list?'
    [ACTION_CMD]='PACKAGES_FILE="$(Set_Op_Union "${PACKAGES_FILE}" "${_item}")"'
    [EXECUTED_CMD]='UI_Passive_Alert "Added"'
    [SKIPPED_CMD]='UI_Passive_Alert "Skipped"'
    [FAILED_CMD]='UI_Passive_Alert "Failed"'
    [EXECUTED_LIST_CMD]='Unit_Report "ADDED TO $(Upper_Case ${SCRIPTNAME}) PACKAGES LIST: ${_executed_list}"'
    [SKIPPED_LIST_CMD]='Unit_Report "SKIPPED ADD TO $(Upper_Case ${SCRIPTNAME}) PACKAGES LIST: ${_skipped_list}"'
    [FAILED_LIST_CMD]='Unit_Report "FAILED ADD TO $(Upper_Case ${SCRIPTNAME}) PACKAGES LIST: ${_failed_list}"'
    [EXECUTED_RTN_NAME]=''
    [SKIPPED_RTN_NAME]=''
    [FAILED_RTN_NAME]=''
    [FORCE_VALUE]='${FORCE}'
    [DEFAULT_CHOICE]='true'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_

    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]=''
    [LIST_VALUE]="${PACKAGES_MISSING_IN_LIVE}"
    [QUERY_STRING]='${_item} in ${SCRIPTNAME} package list but not on system. Remove from ${SCRIPTNAME}?'
    [ACTION_CMD]='PACKAGES_FILE="$(Set_Op_Difference "${PACKAGES_FILE}" "${_item}")"'
    [EXECUTED_CMD]='UI_Passive_Alert "Removed"'
    [SKIPPED_CMD]='UI_Passive_Alert "Skipped"'
    [FAILED_CMD]='UI_Passive_Alert "Failed"'
    [EXECUTED_LIST_CMD]='Unit_Report "REMOVED FROM $(Upper_Case ${SCRIPTNAME}) PACKAGES LIST:\n${_executed_list}"'
    [SKIPPED_LIST_CMD]='Unit_Report "SKIPPED REMOVAL FROM $(Upper_Case ${SCRIPTNAME}) PACKAGES LIST:\n${_skipped_list}"'
    [FAILED_LIST_CMD]='Unit_Report "FAILED REMOVE FROM $(Upper_Case ${SCRIPTNAME}) PACKAGES LIST:\n${_failed_list}"'
    [EXECUTED_RTN_NAME]=''
    [SKIPPED_RTN_NAME]=''
    [FAILED_RTN_NAME]=''
    [FORCE_VALUE]='${FORCE}'
    [DEFAULT_CHOICE]='true'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_

    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]=''
    [LIST_VALUE]="${AUR_MISSING_IN_FILE}"
    [QUERY_STRING]='${_item} on system but not in ${SCRIPTNAME} aur list. Add to ${SCRIPTNAME}?'
    [ACTION_CMD]='AUR_FILE="$(Set_Op_Union "${AUR_FILE}" "${_item}")"'
    [EXECUTED_CMD]='UI_Passive_Alert "Added"'
    [SKIPPED_CMD]='UI_Passive_Alert "Skipped"'
    [FAILED_CMD]='UI_Passive_Alert "Failed"'
    [EXECUTED_LIST_CMD]='Unit_Report "ADDED TO $(Upper_Case ${SCRIPTNAME}) AUR LIST:\n${_executed_list}"'
    [SKIPPED_LIST_CMD]='Unit_Report "SKIPPED ADD TO $(Upper_Case ${SCRIPTNAME}) AUR LIST:\n${_skipped_list}"'
    [FAILED_LIST_CMD]='Unit_Report "FAILED ADD TO $(Upper_Case ${SCRIPTNAME}) AUR LIST:\n${_failed_list}"'
    [EXECUTED_RTN_NAME]=''
    [SKIPPED_RTN_NAME]=''
    [FAILED_RTN_NAME]=''
    [FORCE_VALUE]='${FORCE}'
    [DEFAULT_CHOICE]='true'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_

    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]=''
    [LIST_VALUE]="${AUR_MISSING_IN_LIVE}"
    [QUERY_STRING]='${_item} in ${SCRIPTNAME} aur list but not on system. Remove from ${SCRIPTNAME}?'
    [ACTION_CMD]='AUR_FILE="$(Set_Op_Difference "${AUR_FILE}" "${_item}")"'
    [EXECUTED_CMD]='UI_Passive_Alert "Removed"'
    [SKIPPED_CMD]='UI_Passive_Alert "Skipped"'
    [FAILED_CMD]='UI_Passive_Alert "Failed"'
    [EXECUTED_LIST_CMD]='Unit_Report "REMOVED FROM $(Upper_Case ${SCRIPTNAME}) AUR LIST:\n${_executed_list}"'
    [SKIPPED_LIST_CMD]='Unit_Report "SKIPPED REMOVAL FROM $(Upper_Case ${SCRIPTNAME}) AUR LIST:\n${_skipped_list}"'
    [FAILED_LIST_CMD]='Unit_Report "FAILED REMOVE FROM $(Upper_Case ${SCRIPTNAME}) AUR LIST:\n${_failed_list}"'
    [EXECUTED_RTN_NAME]=''
    [SKIPPED_RTN_NAME]=''
    [FAILED_RTN_NAME]=''
    [FORCE_VALUE]='${FORCE}'
    [DEFAULT_CHOICE]='true'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_

    # WRITE TO FILES
    echo ${PACKAGES_FILE} >> $TMPDIR/${PACKAGES_FILENAME}
    echo ${AUR_FILE} >> $TMPDIR/${AUR_FILENAME}
    local _filename
    for _filename in ${PACKAGES_FILENAME} ${AUR_FILENAME}
    do install -CD --backup=${BACKUP_MODE} -S${BACKUP_SUFFIX} "$TMPDIR/$_filename" "$CONFIG_DIRPATH/$_filename"; done

    ;;
SYSTEM)
    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]=''
    [LIST_VALUE]="${PACKAGES_MISSING_IN_FILE}"
    [QUERY_STRING]='${_item} on system but not in ${SCRIPTNAME} package list. Uninstall (recursive + removes unneeded)?'
    [ACTION_CMD]='Install_Package "${_item}" && PACKAGES_LIVE="$(Set_Op_Union "${PACKAGES_LIVE}" "${_item}")"'
    [EXECUTED_CMD]='UI_Passive_Alert "Uninstalled"'
    [SKIPPED_CMD]='UI_Passive_Alert "Skipped"'
    [FAILED_CMD]='UI_Passive_Alert "Failed"'
    [EXECUTED_LIST_CMD]='Unit_Report "UNINSTALLED FROM SYSTEM: ${_executed_list}"'
    [SKIPPED_LIST_CMD]='Unit_Report "SKIPPED UNINSTALLED FROM SYSTEM: ${_skipped_list}"'
    [FAILED_LIST_CMD]='Unit_Report "FAILED TO UNINSTALL FROM SYSTEM: ${_failed_list}"'
    [EXECUTED_RTN_NAME]=''
    [SKIPPED_RTN_NAME]=''
    [FAILED_RTN_NAME]=''
    [FORCE_VALUE]='${FORCE}'
    [DEFAULT_CHOICE]='false'
    #[DEFAULT_CHOICE]='${FULL_FORCE}'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_

    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]=''
    [LIST_VALUE]="${PACKAGES_MISSING_IN_LIVE}"
    [QUERY_STRING]='${_item} in ${SCRIPTNAME} package list but not on system. Install?'
    [ACTION_CMD]='Uninstall_Package "${_item}" && PACKAGES_LIVE="$(Set_Op_Difference "${PACKAGES_LIVE}" "${_item}")"'
    [EXECUTED_CMD]='UI_Passive_Alert "Installed"'
    [SKIPPED_CMD]='UI_Passive_Alert "Skipped"'
    [FAILED_CMD]='UI_Passive_Alert "Failed"'
    [EXECUTED_LIST_CMD]='Unit_Report "INSTALLED TO SYSTEM: ${_executed_list}"'
    [SKIPPED_LIST_CMD]='Unit_Report "SKIPPED INSTALL TO SYSTEM: ${_skipped_list}"'
    [FAILED_LIST_CMD]='Unit_Report "FAILED TO INSTALL TO SYSTEM: ${_failed_list}"'
    [EXECUTED_RTN_NAME]=''
    [SKIPPED_RTN_NAME]=''
    [FAILED_RTN_NAME]=''
    [FORCE_VALUE]='${FORCE}'
    [DEFAULT_CHOICE]='true'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_

    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]=''
    [LIST_VALUE]="${AUR_MISSING_IN_FILE}"
    [QUERY_STRING]='${_item} on system but not in ${SCRIPTNAME} aur list. Uninstall (recursive + removes unneeded)?'
    [ACTION_CMD]='Uninstall_Package "${_item}" && AUR_LIVE="$(Set_Op_Difference "${AUR_LIVE}" "${_item}")"'
    [EXECUTED_CMD]='UI_Passive_Alert "Uninstalled"'
    [SKIPPED_CMD]='UI_Passive_Alert "Skipped"'
    [FAILED_CMD]='UI_Passive_Alert "Failed"'
    [EXECUTED_LIST_CMD]='Unit_Report "UNINSTALLED FROM SYSTEM: ${_executed_list}"'
    [SKIPPED_LIST_CMD]='Unit_Report "SKIPPED UNINSTALLED FROM SYSTEM: ${_skipped_list}"'
    [FAILED_LIST_CMD]='Unit_Report "FAILED TO UNINSTALL FROM SYSTEM: ${_failed_list}"'
    [EXECUTED_RTN_NAME]=''
    [SKIPPED_RTN_NAME]=''
    [FAILED_RTN_NAME]=''
    [FORCE_VALUE]='${FORCE}'
    [DEFAULT_CHOICE]='false'
    #[DEFAULT_CHOICE]='${FULL_FORCE}'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_

    Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
    [LIST_VAR_NAME]=''
    [LIST_VALUE]="${AUR_MISSING_IN_LIVE}"
    [QUERY_STRING]='${_item} in ${SCRIPTNAME} aur list but not on system. Install?'
    [ACTION_CMD]='Install_AUR "${_item}" && AUR_LIVE="$(Set_Op_Union "${AUR_LIVE}" "${_item}")"'
    [EXECUTED_CMD]='UI_Passive_Alert "Installed"'
    [SKIPPED_CMD]='UI_Passive_Alert "Skipped"'
    [FAILED_CMD]='UI_Passive_Alert "Failed"'
    [EXECUTED_LIST_CMD]='Unit_Report "INSTALLED TO SYSTEM: ${_executed_list}"'
    [SKIPPED_LIST_CMD]='Unit_Report "NOT INSTALLED TO SYSTEM: ${_skipped_list}"'
    [FAILED_LIST_CMD]='Unit_Report "FAILED TO INSTALL TO SYSTEM: ${_failed_list}"'
    [EXECUTED_RTN_NAME]=''
    [SKIPPED_RTN_NAME]=''
    [FAILED_RTN_NAME]=''
    [FORCE_VALUE]='${FORCE}'
    [DEFAULT_CHOICE]='true'
    ); Ask_Auto_Action ASK_AUTO_SOURCE_
    ;;
esac

}

UNIT_Overlay ()
{

# TODO: add garbage collection. when files present in overlay.d but not in 
# overlay list, there should be a prompt to remove

# OVERLAY FILE CHECK
# ----------------------------------------------------------------------
Noforce_Alert () { Is_True ${FORCE} || UI_Passive_Alert "${*}"; }
UI_Backup_Alert ()
{ [[ "${BACKUP_MODE}" == "${DEFAULT_BACKUP_MODE}" ]] && UI_Passive_Alert "$(echo ${*} "(backups will be made):")" || UI_Passive_Alert "$(echo ${*}):"; }

Read_File_Lines_To_Array "${OVERLAY_FILEPATH}" OVERLAY_FILES_ARRAY

if [[ -z ${OVERLAY_FILES_ARRAY[*]} ]]
then
    Unit_Report "No overlay file list. To save a snapshot of specific system 
    configuration files, make a line by line list of file paths in the following 
    file: ${OVERLAY_FILEPATH}"
    return 0
fi

Unit_Report "OVERLAY FILES (${OVERLAY_FILEPATH})\n"
DEFAULT_ATTRIBS="644 root root" # used only if we have a snapshot file but no system file and no attribs are listed

#OVERLAY_FILES_ACTUAL="$(ls -d -1 ${OVERLAY_DIRPATH}/**/*)"
#Debug ">>>>OVERLAY_FILES_ACTUAL\n${OVERLAY_FILES_ACTUAL}"

_line_num=0
while true
do

    # bail if we're past the end of the array
    [[ $_line_num == ${#OVERLAY_FILES_ARRAY[@]} ]] && break

    # create hashed file array for comparison and recreation of new file
    _line="$(Swap_Out_Escaped_Spaces ${OVERLAY_FILES_ARRAY[$_line_num]})"
    local _path="$(Swap_In_Escaped_Spaces $(echo -n $_line | awk '{print $1}'))"
    local _path_hash="$(Hash_Of "${_path}")"

    #FILEHASH_[${_path_hash}]="${_path}" # TODO: remove if unnecessary
    Add_To_Array FILE_HASHLIST "${_path_hash}"
    FILE_[${_path_hash},PATH,SYST]="${_path}" # unnecessary?
    FILE_[${_path_hash},PATH,OVER]="$OVERLAY_DIRPATH/${_path#/}"
    FILE_[${_path_hash},ATTR,OVER]="$(echo -n $_line | awk '{print $2,$3,$4}' | sed 's/^\s*\(.*\)\s*/\1/')"
    FILE_[${_path_hash},ATTR,SYST]="$(stat -c '%a %U %G' ${_path} 2>/dev/null | sed 's/^\s*\(.*\)\s*/\1/')"

    # FOLLOWING TESTS: ONE OR BOTH FILES MISSING
    if [[ ! -e "${FILE_[$_path_hash,PATH,SYST]}" && ! -e "${FILE_[$_path_hash,PATH,OVER]}" ]]; then Add_To_Array OVERLAY_MISS_BOTH "${_path}"
    elif [[ ! -e "${FILE_[$_path_hash,PATH,SYST]}" && -e "${FILE_[$_path_hash,PATH,OVER]}" ]]; then Add_To_Array OVERLAY_MISS_SYST "${_path}"
    elif [[ -e "${FILE_[$_path_hash,PATH,SYST]}" && ! -e "${FILE_[$_path_hash,PATH,OVER]}" ]]; then Add_To_Array OVERLAY_MISS_OVER "${_path}"

    # FOLLOWING TESTS: BOTH FILES PRESENT
    elif [[ "${FILE_[$_path_hash,ATTR,SYST]}" != "${FILE_[$_path_hash,ATTR,OVER]}" ]] \
    && $(! diff -q "${FILE_[$_path_hash,PATH,SYST]}" "${FILE_[$_path_hash,PATH,OVER]}" &>/dev/null); then Add_To_Array OVERLAY_DIFF_CONT_ATTR "${_path}"
    elif $(! diff -q "${FILE_[$_path_hash,PATH,SYST]}" "${FILE_[$_path_hash,PATH,OVER]}" &>/dev/null); then Add_To_Array OVERLAY_DIFF_CONT "${_path}"
    elif [[ "${FILE_[$_path_hash,ATTR,SYST]}" != "${FILE_[$_path_hash,ATTR,OVER]}" ]]; then Add_To_Array OVERLAY_DIFF_ATTR "${_path}"
    else Add_To_Array OVERLAY_GOOD "${_path}"
    fi

    let "_line_num+=1"

    #OVERLAY_FILES_ACTUAL="$(Set_Op_Difference "${OVERLAY_FILES_ACTUAL}" "${FILE_[$_path_hash,PATH,OVER]}")"

done

# GARBAGE COLLECTION (items in overlay directory but not in overlay list)
#OVERLAY_FILES_ACTUAL="$(ls -d -1 ${OVERLAY_DIRPATH}/**/*)"
#OVERLAY_FILES_LIST="$(Array_To_List OVERLAY_FILES_ARRAY)"
#OVERLAY_GARBAGE="$(Set_Op_Difference "${OVERLAY_FILES_LIST}" "${OVERLAY_FILES_ACTUAL}")"
#echo "GARBAGE: ${OVERLAY_GARBAGE}"
#exit

#Debug "OVERLAY_FILES_ACTUAL\n${OVERLAY_FILES_ACTUAL}"
#exit

case $MODE in

REPORT)
;;

CONFIG)
 
    File_Install () {
        local _path_hash="${1}";
        install -CD --backup=${BACKUP_MODE} -S${BACKUP_SUFFIX} "${FILE_[${_path_hash},PATH,SYST]}" "${FILE_[${_path_hash},PATH,OVER]}"
    }

    Update_Attribs () {
        local _path_hash="${1}";
        FILE_[${_path_hash},ATTR,OVER,PREV]=${FILE_[${_path_hash},ATTR,OVER]};
        FILE_[${_path_hash},ATTR,OVER]=${FILE_[${_path_hash},ATTR,SYST]}
    }

    CHANGE_MADE=false

    # MISSING FROM OVERLAY
    # -------------------------------------------------------------------------
    if [[ -n ${OVERLAY_MISS_OVER[*]:-} ]]; then
        UI_Backup_Alert "\nCOPY MISSING FILES?\n${HR}
        \nThe following files haven't been saved to your ${SCRIPTNAME} config 
        yet. Please choose whether to copy each item to the config overlay 
        directory"

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]='OVERLAY_MISS_OVER'

        [QUERY_STRING]='\n${_item}\nCopy file?'

        [ACTION_CMD]='File_Install "${_hash}"'
        [DEFAULT_CHOICE]='true'

        [EXECUTED_CMD]='if [[ -z ${FILE_[${_hash},ATTR,OVER]} ]] ; then
            Update_Attribs "${_hash}";
            Add_To_Array OVERLAY_GOOD "${_item} (NEW COPY; ATTRIBUTES SET FROM SYSTEM)";
            Noforce_Alert "(copied; attributes set from system file)";
        elif [[ "${FILE_[${_hash},ATTR,OVER]}" == "${FILE_[${_hash},ATTR,SYST]}" ]]; then
            Update_Attribs "${_hash}";
            Add_To_Array OVERLAY_GOOD "${_item} (NEW COPY; ATTRIBUTES MATCHED)";
            Noforce_Alert "(copied; attributes set from system file)";
        else
            Add_To_Array OVERLAY_DIFF_ATTR "${_item}";
            Noforce_Alert "(copied; attributes differ, will prompt for resolution in a moment)";
            FILE_[${_hash},NEWCOPY_REPORT]="NEW COPY; ";
        fi;
        Remove_From_Array OVERLAY_MISS_OVER "${_item}";
        CHANGE_MADE=true;'
        [SKIPPED_CMD]='Noforce_Alert "(skipped)"; Swap_In_Array OVERLAY_MISS_OVER "${_item}" "${_item} (NEW COPY SKIPPED)"'
        [FAILED_CMD]='Noforce_Alert "(copy failed!)"; Swap_In_Array OVERLAY_MISS_OVER "${_item}" "${_item} (NEW COPY FAILED)"'

        [FORCE_VALUE]='${FORCE}'

        ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # DIFFERING ATTRIBUTES
    # -------------------------------------------------------------------------
    if [[ -n ${OVERLAY_DIFF_ATTR[*]:-} ]]; then
        UI_Backup_Alert "\nUPDATE ATTRIBUTES?\n${HR}
        \nThe following files differ in attributes between the system and 
        ${SCRIPTNAME} (contents match). Please choose whether to update each 
        item in your overlay directory"

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]='OVERLAY_DIFF_ATTR'

        [QUERY_STRING]='\n${_item}\n(CURRENT IN OVERLAY:${FILE_[${_hash},ATTR,OVER]:-MISSING}) (NEW FROM SYSTEM:${FILE_[${_hash},ATTR,SYST]})\nUpdate attributes?'

        [ACTION_CMD]='Update_Attribs "${_hash}"'
        [DEFAULT_CHOICE]='true'

        [EXECUTED_CMD]='Noforce_Alert "(updated attributes)";
        Add_To_Array OVERLAY_GOOD "${_item} (${FILE_[${_hash},NEWCOPY_REPORT]:-}UPDATED ATTRIBUTES)";
        Remove_From_Array OVERLAY_DIFF_ATTR "${_item}";
        CHANGE_MADE=true;'
        [SKIPPED_CMD]=' Noforce_Alert "(skipped)";
        Swap_In_Array OVERLAY_DIFF_ATTR "${_item}" "${_item} (UPDATE ATTRIBUTES SKIPPED)"'
        [FAILED_CMD]='  Noforce_Alert "(update attributes failed!)";
        Swap_In_Array OVERLAY_DIFF_ATTR "${_item}" "${_item} (UPDATE ATTRIBUTES FAILED!)"'

        [FORCE_VALUE]='${FORCE}'

        ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # DIFFERING CONTENT
    # -------------------------------------------------------------------------
    if [[ -n ${OVERLAY_DIFF_CONT[*]:-} ]]; then
        UI_Backup_Alert "\nUPDATE FILE?\n${HR}
        The following files differ in content between ${SCRIPTNAME} and the 
        system (attributes match). Please choose whether to update each item in 
        your overlay directory"

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]='OVERLAY_DIFF_CONT'

        [QUERY_STRING]='\n${_item}\nUpdate file?'

        [ACTION_CMD]='File_Install "${_hash}"'
        [DEFAULT_CHOICE]='true'

        [EXECUTED_CMD]='Noforce_Alert "(updated)";
        Add_To_Array OVERLAY_GOOD "${_item} (UPDATED CONTENT)"
        Remove_From_Array OVERLAY_DIFF_CONT "${_item}";
        CHANGE_MADE=true;'
        [SKIPPED_CMD]=' Noforce_Alert "(skipped)";
        Swap_In_Array OVERLAY_DIFF_CONT "${_item}" "${_item} (UPDATE CONTENT SKIPPED)"'
        [FAILED_CMD]='  Noforce_Alert "(update failed!)";
        Swap_In_Array OVERLAY_DIFF_CONT "${_item}" "${_item} (UPDATE CONTENT FAILED!)"'

        [FORCE_VALUE]='${FORCE}'

        ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # DIFFERING CONTENT & ATTRIBUTES
    # -------------------------------------------------------------------------
    if [[ -n ${OVERLAY_DIFF_CONT_ATTR[*]:-} ]]; then
        UI_Backup_Alert "\nUPDATE FILE & ATTRIBUTES?\n${HR}
        \nThe following files differ in content AND attributes between the 
        system and ${SCRIPTNAME}. Please choose whether to update each item in 
        your overlay directory"

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]='OVERLAY_DIFF_CONT_ATTR'

        [QUERY_STRING]='\n${_item}\n(CURRENT IN OVERLAY:${FILE_[${_hash},ATTR,OVER]:-MISSING}) (NEW FROM SYSTEM:${FILE_[${_hash},ATTR,SYST]})\nUpdate file & attributes?'

        [ACTION_CMD]='File_Install "${_hash}" && Update_Attribs "${_hash}"'
        [DEFAULT_CHOICE]='true'

        [EXECUTED_CMD]='Noforce_Alert "(updated content & attributes)";
        Add_To_Array PROCESSED_GOOD "${_item} (UPDATED CONTENT & ATTRIBUTES)"
        Remove_From_Array OVERLAY_DIFF_CONT_ATTR "${_item}";
        CHANGE_MADE=true;'
        [SKIPPED_CMD]=' Noforce_Alert "(skipped)";
        Swap_In_Array OVERLAY_DIFF_CONT_ATTR "${_item}" "${_item} (UPDATE CONTENT & ATTRIBUTES SKIPPED)"'
        [FAILED_CMD]='  Noforce_Alert "(update content & attributes failed!)";
        Swap_In_Array OVERLAY_DIFF_CONT_ATTR "${_item}" "${_item} (UPDATE CONTENT & ATTRIBUTES FAILED!)"'

        [FORCE_VALUE]='${FORCE}'

        ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # WRITE OVERLAY FILE
    if Is_True ${CHANGE_MADE}
    then
        local _hash
        local _overlay_file_list=
        for _hash in "${FILE_HASHLIST[@]}";
        do
            _overlay_file_list+="${FILE_[$_hash,PATH,SYST]} ${FILE_[$_hash,ATTR,OVER]}\n";
        done
        echo -e "${_overlay_file_list}" | sort > "${TMPDIR}/${OVERLAY_FILENAME}"
        install -CD --backup=${BACKUP_MODE} -S${BACKUP_SUFFIX} "${TMPDIR}/${OVERLAY_FILENAME}" "${OVERLAY_FILEPATH}" \
        && MODE_FINAL="SUCCESSFULLY UPDATED OVERLAY FILE:\n ${OVERLAY_FILEPATH}\n" \
        || MODE_FINAL="FAILED TO UPDATE OVERLAY FILE!\n ${OVERLAY_FILEPATH}\n"
    else
        MODE_FINAL="NO CHANGES MADE; OVERLAY FILE NOT UPDATED:\n ${OVERLAY_FILEPATH}\n"
    fi

;;
SYSTEM)

    Update_Attribs () {
        local _path_hash="${1}";
        local _target_path="${FILE_[${_path_hash},PATH,SYST]}"
        local _attribs=(${FILE_[${_path_hash},ATTR,OVER]})
        local _mode=${_attribs[0]}
        local _owner=${_attribs[1]}
        local _group=${_attribs[2]}
        sudo chmod ${_mode} ${_target_path}
        sudo chown ${_owner}:${_group} ${_target_path}
    }

    File_Install () {
        local _path_hash="${1}";
        local _source_path="${FILE_[${_path_hash},PATH,OVER]}"
        local _target_path="${FILE_[${_path_hash},PATH,SYST]}"
        local _attribs=(${FILE_[${_path_hash},ATTR,OVER]})
        local _mode=${_attribs[0]:+-m}${_attribs[0]:-}
        local _owner=${_attribs[1]:+-o}${_attribs[1]:-}
        local _group=${_attribs[2]:+-g}${_attribs[2]:-}
        sudo install -CD --backup=${BACKUP_MODE} -S${BACKUP_SUFFIX} ${_mode} ${_owner} ${_group} "${_source_path}" "${_target_path}"
    }

    # MISSING FROM SYSTEM
    # -------------------------------------------------------------------------
    if [[ -n ${OVERLAY_MISS_SYST[*]:-} ]]; then
        UI_Backup_Alert "\nCOPY MISSING FILES?\n${HR}
        \nThe following files are in your ${SCRIPTNAME} config overlay 
        directory but not yet installed on your system. Please choose whether 
        to install each item to the live system."

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]='OVERLAY_MISS_SYST'

        [QUERY_STRING]='\n${_item}\nInstall file?'

        [ACTION_CMD]='File_Install "${_hash}"'
        [DEFAULT_CHOICE]='true'

        [EXECUTED_CMD]='Add_To_Array OVERLAY_GOOD "${_item} (NEW FILE INSTALLED TO SYSTEM)";
        Remove_From_Array OVERLAY_MISS_SYST "${_item}";
        CHANGE_MADE=true;'
        [SKIPPED_CMD]='Noforce_Alert "(skipped)"; Swap_In_Array OVERLAY_MISS_SYST "${_item}" "${_item} (INSTALL SYSTEM FILE SKIPPED)"'
        [FAILED_CMD]='Noforce_Alert "(copy failed!)"; Swap_In_Array OVERLAY_MISS_SYST "${_item}" "${_item} (INSTALL SYSTEM FILE FAILED)"'

        [FORCE_VALUE]='${FORCE}'

        ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # DIFFERING ATTRIBUTES
    # -------------------------------------------------------------------------
    if [[ -n ${OVERLAY_DIFF_ATTR[*]:-} ]]; then
        UI_Backup_Alert "\nUPDATE ATTRIBUTES?\n${HR}
        \nThe following files differ in attributes between the system and 
        ${SCRIPTNAME} (contents match). Please choose whether to update each 
        file's attributes on the live system"

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]='OVERLAY_DIFF_ATTR'

        [QUERY_STRING]='\n${_item}\n(CURRENT ON SYSTEM:${FILE_[${_hash},ATTR,SYST]}) (NEW FROM OVERLAY:${FILE_[${_hash},ATTR,OVER]:-MISSING}) \nUpdate attributes?'
        [ACTION_CMD]='Update_Attribs "${_hash}"'
        [DEFAULT_CHOICE]='true'

        [EXECUTED_CMD]='Noforce_Alert "(updated attributes)";
        Add_To_Array OVERLAY_GOOD "${_item} (${FILE_[${_hash},NEWCOPY_REPORT]:-}UPDATED SYSTEM FILE ATTRIBUTES)";
        Remove_From_Array OVERLAY_DIFF_ATTR "${_item}";
        CHANGE_MADE=true;'
        [SKIPPED_CMD]=' Noforce_Alert "(skipped)";
        Swap_In_Array OVERLAY_DIFF_ATTR "${_item}" "${_item} (UPDATE SYSTEM FILE ATTRIBUTES SKIPPED)"'
        [FAILED_CMD]='  Noforce_Alert "(update attributes failed!)";
        Swap_In_Array OVERLAY_DIFF_ATTR "${_item}" "${_item} (UPDATE SYSTEM FILE ATTRIBUTES FAILED!)"'

        [FORCE_VALUE]='${FORCE}'

        ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # DIFFERING CONTENT
    # -------------------------------------------------------------------------
    if [[ -n ${OVERLAY_DIFF_CONT[*]:-} ]]; then
        UI_Backup_Alert "\nUPDATE FILE?\n${HR}
        The following files differ in content between ${SCRIPTNAME} and the 
        system (attributes match). Please choose whether to update each item in 
        your overlay directory"

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]='OVERLAY_DIFF_CONT'

        [QUERY_STRING]='\n${_item}\nUpdate file?'

        [ACTION_CMD]='File_Install "${_hash}"'
        [DEFAULT_CHOICE]='true'

        [EXECUTED_CMD]='Noforce_Alert "(updated)";
        Add_To_Array OVERLAY_GOOD "${_item} (UPDATED SYSTEM FILE CONTENT)"
        Remove_From_Array OVERLAY_DIFF_CONT "${_item}";
        CHANGE_MADE=true;'
        [SKIPPED_CMD]=' Noforce_Alert "(skipped)";
        Swap_In_Array OVERLAY_DIFF_CONT "${_item}" "${_item} (UPDATE SYSTEM FILE CONTENT SKIPPED)"'
        [FAILED_CMD]='  Noforce_Alert "(update failed!)";
        Swap_In_Array OVERLAY_DIFF_CONT "${_item}" "${_item} (UPDATE SYSTEM FILE CONTENT FAILED!)"'

        [FORCE_VALUE]='${FORCE}'

        ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

    # DIFFERING CONTENT & ATTRIBUTES
    # -------------------------------------------------------------------------
    if [[ -n ${OVERLAY_DIFF_CONT_ATTR[*]:-} ]]; then
        UI_Backup_Alert "\nUPDATE FILE & ATTRIBUTES?\n${HR}
        \nThe following files differ in content AND attributes between the 
        system and ${SCRIPTNAME}. Please choose whether to update each item in 
        your overlay directory"

        Unset_Array ASK_AUTO_SOURCE_; ASK_AUTO_SOURCE_=(
        [LIST_VAR_NAME]='OVERLAY_DIFF_CONT_ATTR'

        [QUERY_STRING]='\n${_item}\n(CURRENT IN OVERLAY:${FILE_[${_hash},ATTR,OVER]:-MISSING}) (NEW FROM SYSTEM:${FILE_[${_hash},ATTR,SYST]})\nUpdate file & attributes?'

        [ACTION_CMD]='File_Install "${_hash}" && Update_Attribs "${_hash}"'
        [DEFAULT_CHOICE]='true'

        [EXECUTED_CMD]='Noforce_Alert "(updated content & attributes)";
        Add_To_Array PROCESSED_GOOD "${_item} (UPDATED SYSTEM FILE CONTENT & ATTRIBUTES)"
        Remove_From_Array OVERLAY_DIFF_CONT_ATTR "${_item}";
        CHANGE_MADE=true;'
        [SKIPPED_CMD]=' Noforce_Alert "(skipped)";
        Swap_In_Array OVERLAY_DIFF_CONT_ATTR "${_item}" "${_item} (UPDATE SYSTEM FILE CONTENT & ATTRIBUTES SKIPPED)"'
        [FAILED_CMD]='  Noforce_Alert "(update content & attributes failed!)";
        Swap_In_Array OVERLAY_DIFF_CONT_ATTR "${_item}" "${_item} (UPDATE SYSTEM FILE CONTENT & ATTRIBUTES FAILED!)"'

        [FORCE_VALUE]='${FORCE}'

        ); Ask_Auto_Action ASK_AUTO_SOURCE_;
    fi

;;
esac

[[ -n ${OVERLAY_GOOD[@]:-} ]] && Unit_Report "MATCHES ON SYSTEM/CONFIG:\n $(Array_To_Report OVERLAY_GOOD)"
[[ -n ${OVERLAY_MISS_SYST[@]:-} ]] && Unit_Report "MISSING ON SYSTEM (PRESENT IN $(Upper_Case ${SCRIPTNAME}) CONFIG):\n $(Array_To_Report OVERLAY_MISS_SYST)"
[[ -n ${OVERLAY_MISS_OVER[@]:-} ]] && Unit_Report "MISSING ON $(Upper_Case ${SCRIPTNAME}) CONFIG (PRESENT ON SYSTEM):\n $(Array_To_Report OVERLAY_MISS_OVER)"
[[ -n ${OVERLAY_MISS_BOTH[@]:-} ]] && Unit_Report "MISSING ON BOTH SYSTEM AND $(Upper_Case ${SCRIPTNAME}) CONFIG:\n $(Array_To_Report OVERLAY_MISS_BOTH)"
[[ -n ${OVERLAY_DIFF_ATTR[@]:-} ]] && Unit_Report "ATTRIBUTES DIFFER (OR MISSING):\n $(Array_To_Report OVERLAY_DIFF_ATTR)"
[[ -n ${OVERLAY_DIFF_CONT[@]:-} ]] && Unit_Report "CONTENTS DIFFER:\n $(Array_To_Report OVERLAY_DIFF_CONT)"
[[ -n ${OVERLAY_DIFF_CONT_ATTR[@]:-} ]] && Unit_Report "ATTRIBS/CONTENTS DIFFER:\n $(Array_To_Report OVERLAY_DIFF_CONT_ATTR)"
[[ -n ${OVERLAY_GARBAGE:-} ]] && Unit_Report "GARBAGE COLLECTION (ITEMS IN OVERLAY DIRECTORY, NOT IN OVERLAY LIST)\n${OVERLAY_GARBAGE}"
[[ -n ${MODE_FINAL:-} ]] && Unit_Report "${MODE_FINAL}"
}

UNIT_Report ()
{
# trap was previously ReportResults plus CleanUpEnvironment; if we're 
# here and have a critical failure then we must of course reassign our 
# trap to CleanUpEnvironment (which would have been called after 
# ReportResults)
trap 'UNIT_Clean_Up' INT TERM EXIT
Is_True ${DEBUG} && return 0
if [[ -n ${REPORT_SEQUENCE_[@]:-} ]]
then
    for _report_category in "${REPORT_SEQUENCE_[@]:-}"
    do
        if [[ -n ${REPORT_[${_report_category}]} ]]
        then
            UI_Passive_Alert "\n$(Upper_Case $_report_category | tr "_" " "):"
            UI_Passive_Alert "--------------------------------------------------------------------------------"
            UI_Passive_Alert "${REPORT_[${_report_category}]}"
        fi
    done
fi

#each sequence unit should be creating a report in a standard format
#and adding to a global report sequence variable
}

UNIT_Clean_Up ()
{
trap - INT TERM EXIT
#remove temp dir
for cleanup_item in "${CLEANUP[@]}"; do eval "$cleanup_item"; done
}

#Safe_Execute ${UNIT_SEQUENCE}
for unit in $UNIT_SEQUENCE
do
    eval UNIT_$unit
done
unset unit
